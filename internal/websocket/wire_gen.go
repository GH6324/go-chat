// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"go-chat/config"
	"go-chat/internal/provider"
	"go-chat/internal/repository/cache"
	"go-chat/internal/repository/dao"
	"go-chat/internal/service"
	"go-chat/internal/websocket/internal/handler"
	"go-chat/internal/websocket/internal/process"
	"go-chat/internal/websocket/internal/process/consume"
	"go-chat/internal/websocket/internal/process/server"
	"go-chat/internal/websocket/internal/router"
)

// Injectors from wire.go:

func Initialize(ctx context.Context, conf *config.Config) *AppProvider {
	client := provider.NewRedisClient(ctx, conf)
	sidServer := cache.NewSid(client)
	wsClientSession := cache.NewWsClientSession(client, conf, sidServer)
	clientService := service.NewClientService(wsClientSession)
	roomStorage := cache.NewRoomStorage(client)
	db := provider.NewMySQLClient(conf)
	baseService := service.NewBaseService(db, client)
	baseDao := dao.NewBaseDao(db, client)
	relation := cache.NewRelation(client)
	groupMemberDao := dao.NewGroupMemberDao(baseDao, relation)
	groupMemberService := service.NewGroupMemberService(baseService, groupMemberDao)
	defaultWebSocket := handler.NewDefaultWebSocket(client, conf, clientService, roomStorage, groupMemberService)
	exampleWebsocket := handler.NewExampleWebsocket()
	handlerHandler := &handler.Handler{
		DefaultWebSocket: defaultWebSocket,
		ExampleWebsocket: exampleWebsocket,
	}
	sessionStorage := cache.NewSessionStorage(client)
	engine := router.NewRouter(conf, handlerHandler, sessionStorage)
	websocketServer := provider.NewWebsocketServer(conf, engine)
	health := server.NewHealth(conf, sidServer)
	talkVote := cache.NewTalkVote(client)
	talkRecordsVoteDao := dao.NewTalkRecordsVoteDao(baseDao, talkVote)
	talkRecordsDao := dao.NewTalkRecordsDao(baseDao)
	talkRecordsService := service.NewTalkRecordsService(baseService, talkVote, talkRecordsVoteDao, groupMemberDao, talkRecordsDao)
	contactRemark := cache.NewContactRemark(client)
	contactDao := dao.NewContactDao(baseDao, contactRemark, relation)
	contactService := service.NewContactService(baseService, contactDao)
	defaultSubscribe := consume.NewDefaultSubscribe(conf, wsClientSession, roomStorage, talkRecordsService, contactService)
	serverDefaultSubscribe := server.NewDefaultSubscribe(client, conf, defaultSubscribe)
	exampleSubscribe := consume.NewExampleSubscribe()
	serverExampleSubscribe := server.NewExampleSubscribe(client, conf, exampleSubscribe)
	subServers := &process.SubServers{
		Health:           health,
		DefaultSubscribe: serverDefaultSubscribe,
		ExampleSubscribe: serverExampleSubscribe,
	}
	processServer := process.NewServer(subServers)
	appProvider := &AppProvider{
		Config:    conf,
		Server:    websocketServer,
		Coroutine: processServer,
	}
	return appProvider
}

// wire.go:

var providerSet = wire.NewSet(provider.NewMySQLClient, provider.NewRedisClient, provider.NewWebsocketServer, router.NewRouter, wire.Struct(new(process.SubServers), "*"), process.NewServer, server.NewHealth, server.NewDefaultSubscribe, server.NewExampleSubscribe, consume.NewDefaultSubscribe, consume.NewExampleSubscribe, cache.NewSessionStorage, cache.NewSid, cache.NewRedisLock, cache.NewWsClientSession, cache.NewRoomStorage, cache.NewTalkVote, cache.NewRelation, cache.NewContactRemark, dao.NewBaseDao, dao.NewTalkRecordsDao, dao.NewTalkRecordsVoteDao, dao.NewGroupMemberDao, dao.NewContactDao, service.NewBaseService, service.NewTalkRecordsService, service.NewClientService, service.NewGroupMemberService, service.NewContactService, handler.NewDefaultWebSocket, handler.NewExampleWebsocket, wire.Struct(new(handler.Handler), "*"), wire.Struct(new(AppProvider), "*"))
