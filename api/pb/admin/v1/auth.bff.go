// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package admin

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IAuthHandler BFF 接口
type IAuthHandler interface {
	Login(ctx context.Context, req *AuthLoginRequest) (*AuthLoginResponse, error)
	Captcha(ctx context.Context, req *AuthCaptchaRequest) (*AuthCaptchaResponse, error)
	Logout(ctx context.Context, req *AuthLogoutRequest) (*AuthLogoutResponse, error)
	Refresh(ctx context.Context, req *AuthRefreshRequest) (*AuthRefreshResponse, error)
	Detail(ctx context.Context, req *AuthDetailRequest) (*AuthDetailResponse, error)
	UpdatePassword(ctx context.Context, req *AuthUpdatePasswordRequest) (*AuthUpdatePasswordResponse, error)
	UpdateDetail(ctx context.Context, req *AuthUpdateDetailRequest) (*AuthUpdateDetailResponse, error)
	Menus(ctx context.Context, req *AuthMenusRequest) (*AuthMenusResponse, error)
}

// RegisterAuthHandler 注册服务路由处理器
func RegisterAuthHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IAuthHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/backend/auth/login", func(c *gin.Context) {
		var in AuthLoginRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Login(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/captcha", func(c *gin.Context) {
		var in AuthCaptchaRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Captcha(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/logout", func(c *gin.Context) {
		var in AuthLogoutRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Logout(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/refresh", func(c *gin.Context) {
		var in AuthRefreshRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Refresh(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/detail", func(c *gin.Context) {
		var in AuthDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/update-password", func(c *gin.Context) {
		var in AuthUpdatePasswordRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.UpdatePassword(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/update-detail", func(c *gin.Context) {
		var in AuthUpdateDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.UpdateDetail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/auth/menus", func(c *gin.Context) {
		var in AuthMenusRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Menus(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
