// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package admin

import (
	"context"

	"github.com/gin-gonic/gin"
)

// ITotpHandler BFF 接口
type ITotpHandler interface {
	Status(ctx context.Context, req *TotpStatusRequest) (*TotpStatusResponse, error)
	Close(ctx context.Context, req *TotpCloseRequest) (*TotpCloseResponse, error)
	Init(ctx context.Context, req *TotpInitRequest) (*TotpInitResponse, error)
	Submit(ctx context.Context, req *TotpSubmitRequest) (*TotpSubmitResponse, error)
	Qrcode(ctx context.Context, req *TotpQrcodeRequest) (*TotpQrcodeResponse, error)
}

// RegisterTotpHandler 注册服务路由处理器
func RegisterTotpHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler ITotpHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/backend/totp/status", func(c *gin.Context) {
		var in TotpStatusRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Status(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/totp/close", func(c *gin.Context) {
		var in TotpCloseRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Close(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/totp/init", func(c *gin.Context) {
		var in TotpInitRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Init(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/totp/submit", func(c *gin.Context) {
		var in TotpSubmitRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Submit(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/totp/qrcode", func(c *gin.Context) {
		var in TotpQrcodeRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Qrcode(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
