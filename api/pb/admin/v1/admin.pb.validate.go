// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/admin.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AdminListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListRequestMultiError, or nil if none found.
func (m *AdminListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := AdminListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := AdminListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Status

	// no validation rules for Email

	if len(errors) > 0 {
		return AdminListRequestMultiError(errors)
	}

	return nil
}

// AdminListRequestMultiError is an error wrapping multiple validation errors
// returned by AdminListRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListRequestMultiError) AllErrors() []error { return m }

// AdminListRequestValidationError is the validation error returned by
// AdminListRequest.Validate if the designated constraints aren't met.
type AdminListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListRequestValidationError) ErrorName() string { return "AdminListRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListRequestValidationError{}

// Validate checks the field values on AdminListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListResponseMultiError, or nil if none found.
func (m *AdminListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for PageTotal

	if len(errors) > 0 {
		return AdminListResponseMultiError(errors)
	}

	return nil
}

// AdminListResponseMultiError is an error wrapping multiple validation errors
// returned by AdminListResponse.ValidateAll() if the designated constraints
// aren't met.
type AdminListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListResponseMultiError) AllErrors() []error { return m }

// AdminListResponseValidationError is the validation error returned by
// AdminListResponse.Validate if the designated constraints aren't met.
type AdminListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListResponseValidationError) ErrorName() string {
	return "AdminListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListResponseValidationError{}

// Validate checks the field values on AdminCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateRequestMultiError, or nil if none found.
func (m *AdminCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := AdminCreateRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 6 {
		err := AdminCreateRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := AdminCreateRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AdminCreateRequestMultiError(errors)
	}

	return nil
}

// AdminCreateRequestMultiError is an error wrapping multiple validation errors
// returned by AdminCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateRequestMultiError) AllErrors() []error { return m }

// AdminCreateRequestValidationError is the validation error returned by
// AdminCreateRequest.Validate if the designated constraints aren't met.
type AdminCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateRequestValidationError) ErrorName() string {
	return "AdminCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateRequestValidationError{}

// Validate checks the field values on AdminCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateResponseMultiError, or nil if none found.
func (m *AdminCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminCreateResponseMultiError(errors)
	}

	return nil
}

// AdminCreateResponseMultiError is an error wrapping multiple validation
// errors returned by AdminCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateResponseMultiError) AllErrors() []error { return m }

// AdminCreateResponseValidationError is the validation error returned by
// AdminCreateResponse.Validate if the designated constraints aren't met.
type AdminCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateResponseValidationError) ErrorName() string {
	return "AdminCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateResponseValidationError{}

// Validate checks the field values on AdminStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStatusRequestMultiError, or nil if none found.
func (m *AdminStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AdminStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AdminStatusRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := AdminStatusRequestValidationError{
			field:  "Status",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AdminStatusRequestMultiError(errors)
	}

	return nil
}

// AdminStatusRequestMultiError is an error wrapping multiple validation errors
// returned by AdminStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStatusRequestMultiError) AllErrors() []error { return m }

// AdminStatusRequestValidationError is the validation error returned by
// AdminStatusRequest.Validate if the designated constraints aren't met.
type AdminStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStatusRequestValidationError) ErrorName() string {
	return "AdminStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStatusRequestValidationError{}

var _AdminStatusRequest_Status_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on AdminStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStatusResponseMultiError, or nil if none found.
func (m *AdminStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminStatusResponseMultiError(errors)
	}

	return nil
}

// AdminStatusResponseMultiError is an error wrapping multiple validation
// errors returned by AdminStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStatusResponseMultiError) AllErrors() []error { return m }

// AdminStatusResponseValidationError is the validation error returned by
// AdminStatusResponse.Validate if the designated constraints aren't met.
type AdminStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStatusResponseValidationError) ErrorName() string {
	return "AdminStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStatusResponseValidationError{}

// Validate checks the field values on AdminResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminResetPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminResetPasswordRequestMultiError, or nil if none found.
func (m *AdminResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 1 {
		err := AdminResetPasswordRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := AdminResetPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AdminResetPasswordRequestMultiError(errors)
	}

	return nil
}

// AdminResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by AdminResetPasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type AdminResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminResetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminResetPasswordRequestMultiError) AllErrors() []error { return m }

// AdminResetPasswordRequestValidationError is the validation error returned by
// AdminResetPasswordRequest.Validate if the designated constraints aren't met.
type AdminResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminResetPasswordRequestValidationError) ErrorName() string {
	return "AdminResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminResetPasswordRequestValidationError{}

// Validate checks the field values on AdminResetPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminResetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminResetPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminResetPasswordResponseMultiError, or nil if none found.
func (m *AdminResetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminResetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminResetPasswordResponseMultiError(errors)
	}

	return nil
}

// AdminResetPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by AdminResetPasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type AdminResetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminResetPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminResetPasswordResponseMultiError) AllErrors() []error { return m }

// AdminResetPasswordResponseValidationError is the validation error returned
// by AdminResetPasswordResponse.Validate if the designated constraints aren't met.
type AdminResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminResetPasswordResponseValidationError) ErrorName() string {
	return "AdminResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminResetPasswordResponseValidationError{}

// Validate checks the field values on AdminListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListResponse_ItemMultiError, or nil if none found.
func (m *AdminListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for LastLoginAt

	// no validation rules for RoleName

	if len(errors) > 0 {
		return AdminListResponse_ItemMultiError(errors)
	}

	return nil
}

// AdminListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by AdminListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type AdminListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListResponse_ItemMultiError) AllErrors() []error { return m }

// AdminListResponse_ItemValidationError is the validation error returned by
// AdminListResponse_Item.Validate if the designated constraints aren't met.
type AdminListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListResponse_ItemValidationError) ErrorName() string {
	return "AdminListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e AdminListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListResponse_ItemValidationError{}
