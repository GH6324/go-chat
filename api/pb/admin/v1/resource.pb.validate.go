// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/resource.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResourceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceListRequestMultiError, or nil if none found.
func (m *ResourceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ResourceListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ResourceListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Uri

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Type

	if len(errors) > 0 {
		return ResourceListRequestMultiError(errors)
	}

	return nil
}

// ResourceListRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceListRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceListRequestMultiError) AllErrors() []error { return m }

// ResourceListRequestValidationError is the validation error returned by
// ResourceListRequest.Validate if the designated constraints aren't met.
type ResourceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceListRequestValidationError) ErrorName() string {
	return "ResourceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceListRequestValidationError{}

// Validate checks the field values on ResourceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceListResponseMultiError, or nil if none found.
func (m *ResourceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for PageTotal

	if len(errors) > 0 {
		return ResourceListResponseMultiError(errors)
	}

	return nil
}

// ResourceListResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceListResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceListResponseMultiError) AllErrors() []error { return m }

// ResourceListResponseValidationError is the validation error returned by
// ResourceListResponse.Validate if the designated constraints aren't met.
type ResourceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceListResponseValidationError) ErrorName() string {
	return "ResourceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceListResponseValidationError{}

// Validate checks the field values on ResourceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceCreateRequestMultiError, or nil if none found.
func (m *ResourceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ResourceCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUri()) < 1 {
		err := ResourceCreateRequestValidationError{
			field:  "Uri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ResourceCreateRequest_Type_InLookup[m.GetType()]; !ok {
		err := ResourceCreateRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceCreateRequestMultiError(errors)
	}

	return nil
}

// ResourceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceCreateRequestMultiError) AllErrors() []error { return m }

// ResourceCreateRequestValidationError is the validation error returned by
// ResourceCreateRequest.Validate if the designated constraints aren't met.
type ResourceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceCreateRequestValidationError) ErrorName() string {
	return "ResourceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceCreateRequestValidationError{}

var _ResourceCreateRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ResourceCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceCreateResponseMultiError, or nil if none found.
func (m *ResourceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ResourceCreateResponseMultiError(errors)
	}

	return nil
}

// ResourceCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceCreateResponseMultiError) AllErrors() []error { return m }

// ResourceCreateResponseValidationError is the validation error returned by
// ResourceCreateResponse.Validate if the designated constraints aren't met.
type ResourceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceCreateResponseValidationError) ErrorName() string {
	return "ResourceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceCreateResponseValidationError{}

// Validate checks the field values on ResourceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceUpdateRequestMultiError, or nil if none found.
func (m *ResourceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResourceUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ResourceUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUri()) < 1 {
		err := ResourceUpdateRequestValidationError{
			field:  "Uri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ResourceUpdateRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := ResourceUpdateRequestValidationError{
			field:  "Status",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceUpdateRequestMultiError(errors)
	}

	return nil
}

// ResourceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceUpdateRequestMultiError) AllErrors() []error { return m }

// ResourceUpdateRequestValidationError is the validation error returned by
// ResourceUpdateRequest.Validate if the designated constraints aren't met.
type ResourceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceUpdateRequestValidationError) ErrorName() string {
	return "ResourceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceUpdateRequestValidationError{}

var _ResourceUpdateRequest_Status_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ResourceUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceUpdateResponseMultiError, or nil if none found.
func (m *ResourceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ResourceUpdateResponseMultiError(errors)
	}

	return nil
}

// ResourceUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceUpdateResponseMultiError) AllErrors() []error { return m }

// ResourceUpdateResponseValidationError is the validation error returned by
// ResourceUpdateResponse.Validate if the designated constraints aren't met.
type ResourceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceUpdateResponseValidationError) ErrorName() string {
	return "ResourceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceUpdateResponseValidationError{}

// Validate checks the field values on ResourceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDeleteRequestMultiError, or nil if none found.
func (m *ResourceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResourceDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceDeleteRequestMultiError(errors)
	}

	return nil
}

// ResourceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDeleteRequestMultiError) AllErrors() []error { return m }

// ResourceDeleteRequestValidationError is the validation error returned by
// ResourceDeleteRequest.Validate if the designated constraints aren't met.
type ResourceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDeleteRequestValidationError) ErrorName() string {
	return "ResourceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDeleteRequestValidationError{}

// Validate checks the field values on ResourceDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDeleteResponseMultiError, or nil if none found.
func (m *ResourceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ResourceDeleteResponseMultiError(errors)
	}

	return nil
}

// ResourceDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDeleteResponseMultiError) AllErrors() []error { return m }

// ResourceDeleteResponseValidationError is the validation error returned by
// ResourceDeleteResponse.Validate if the designated constraints aren't met.
type ResourceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDeleteResponseValidationError) ErrorName() string {
	return "ResourceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDeleteResponseValidationError{}

// Validate checks the field values on ResourceListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceListResponse_ItemMultiError, or nil if none found.
func (m *ResourceListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Uri

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Type

	if len(errors) > 0 {
		return ResourceListResponse_ItemMultiError(errors)
	}

	return nil
}

// ResourceListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ResourceListResponse_Item.ValidateAll() if the
// designated constraints aren't met.
type ResourceListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceListResponse_ItemMultiError) AllErrors() []error { return m }

// ResourceListResponse_ItemValidationError is the validation error returned by
// ResourceListResponse_Item.Validate if the designated constraints aren't met.
type ResourceListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceListResponse_ItemValidationError) ErrorName() string {
	return "ResourceListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceListResponse_ItemValidationError{}
