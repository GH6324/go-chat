// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/role.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RoleListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleListRequestMultiError, or nil if none found.
func (m *RoleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := RoleListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := RoleListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleName

	// no validation rules for Status

	if len(errors) > 0 {
		return RoleListRequestMultiError(errors)
	}

	return nil
}

// RoleListRequestMultiError is an error wrapping multiple validation errors
// returned by RoleListRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListRequestMultiError) AllErrors() []error { return m }

// RoleListRequestValidationError is the validation error returned by
// RoleListRequest.Validate if the designated constraints aren't met.
type RoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListRequestValidationError) ErrorName() string { return "RoleListRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListRequestValidationError{}

// Validate checks the field values on RoleListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleListResponseMultiError, or nil if none found.
func (m *RoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for PageTotal

	if len(errors) > 0 {
		return RoleListResponseMultiError(errors)
	}

	return nil
}

// RoleListResponseMultiError is an error wrapping multiple validation errors
// returned by RoleListResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListResponseMultiError) AllErrors() []error { return m }

// RoleListResponseValidationError is the validation error returned by
// RoleListResponse.Validate if the designated constraints aren't met.
type RoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListResponseValidationError) ErrorName() string { return "RoleListResponseValidationError" }

// Error satisfies the builtin error interface
func (e RoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListResponseValidationError{}

// Validate checks the field values on RoleCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleCreateRequestMultiError, or nil if none found.
func (m *RoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleName()) < 1 {
		err := RoleCreateRequestValidationError{
			field:  "RoleName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExplain()) > 100 {
		err := RoleCreateRequestValidationError{
			field:  "Explain",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleCreateRequestMultiError(errors)
	}

	return nil
}

// RoleCreateRequestMultiError is an error wrapping multiple validation errors
// returned by RoleCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateRequestMultiError) AllErrors() []error { return m }

// RoleCreateRequestValidationError is the validation error returned by
// RoleCreateRequest.Validate if the designated constraints aren't met.
type RoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateRequestValidationError) ErrorName() string {
	return "RoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateRequestValidationError{}

// Validate checks the field values on RoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleCreateResponseMultiError, or nil if none found.
func (m *RoleCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleCreateResponseMultiError(errors)
	}

	return nil
}

// RoleCreateResponseMultiError is an error wrapping multiple validation errors
// returned by RoleCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateResponseMultiError) AllErrors() []error { return m }

// RoleCreateResponseValidationError is the validation error returned by
// RoleCreateResponse.Validate if the designated constraints aren't met.
type RoleCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateResponseValidationError) ErrorName() string {
	return "RoleCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateResponseValidationError{}

// Validate checks the field values on RoleUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleUpdateRequestMultiError, or nil if none found.
func (m *RoleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RoleUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRoleName()) < 1 {
		err := RoleUpdateRequestValidationError{
			field:  "RoleName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExplain()) > 100 {
		err := RoleUpdateRequestValidationError{
			field:  "Explain",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleUpdateRequestMultiError(errors)
	}

	return nil
}

// RoleUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateRequestMultiError) AllErrors() []error { return m }

// RoleUpdateRequestValidationError is the validation error returned by
// RoleUpdateRequest.Validate if the designated constraints aren't met.
type RoleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateRequestValidationError) ErrorName() string {
	return "RoleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateRequestValidationError{}

// Validate checks the field values on RoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleUpdateResponseMultiError, or nil if none found.
func (m *RoleUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleUpdateResponseMultiError(errors)
	}

	return nil
}

// RoleUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateResponseMultiError) AllErrors() []error { return m }

// RoleUpdateResponseValidationError is the validation error returned by
// RoleUpdateResponse.Validate if the designated constraints aren't met.
type RoleUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateResponseValidationError) ErrorName() string {
	return "RoleUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateResponseValidationError{}

// Validate checks the field values on RoleListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleListResponse_ItemMultiError, or nil if none found.
func (m *RoleListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleName

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Explain

	if len(errors) > 0 {
		return RoleListResponse_ItemMultiError(errors)
	}

	return nil
}

// RoleListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by RoleListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type RoleListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListResponse_ItemMultiError) AllErrors() []error { return m }

// RoleListResponse_ItemValidationError is the validation error returned by
// RoleListResponse_Item.Validate if the designated constraints aren't met.
type RoleListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListResponse_ItemValidationError) ErrorName() string {
	return "RoleListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e RoleListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListResponse_ItemValidationError{}
