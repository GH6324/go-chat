// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/menu.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MenuCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MenuCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuCreateRequestMultiError, or nil if none found.
func (m *MenuCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MenuCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MenuType

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Sort

	if _, ok := _MenuCreateRequest_Hidden_InLookup[m.GetHidden()]; !ok {
		err := MenuCreateRequestValidationError{
			field:  "Hidden",
			reason: "value must be in list [ Y N]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _MenuCreateRequest_UseLayout_InLookup[m.GetUseLayout()]; !ok {
		err := MenuCreateRequestValidationError{
			field:  "UseLayout",
			reason: "value must be in list [ Y N]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthCode

	if len(errors) > 0 {
		return MenuCreateRequestMultiError(errors)
	}

	return nil
}

// MenuCreateRequestMultiError is an error wrapping multiple validation errors
// returned by MenuCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type MenuCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuCreateRequestMultiError) AllErrors() []error { return m }

// MenuCreateRequestValidationError is the validation error returned by
// MenuCreateRequest.Validate if the designated constraints aren't met.
type MenuCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuCreateRequestValidationError) ErrorName() string {
	return "MenuCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MenuCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuCreateRequestValidationError{}

var _MenuCreateRequest_Hidden_InLookup = map[string]struct{}{
	"":  {},
	"Y": {},
	"N": {},
}

var _MenuCreateRequest_UseLayout_InLookup = map[string]struct{}{
	"":  {},
	"Y": {},
	"N": {},
}

// Validate checks the field values on MenuCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MenuCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuCreateResponseMultiError, or nil if none found.
func (m *MenuCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MenuCreateResponseMultiError(errors)
	}

	return nil
}

// MenuCreateResponseMultiError is an error wrapping multiple validation errors
// returned by MenuCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type MenuCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuCreateResponseMultiError) AllErrors() []error { return m }

// MenuCreateResponseValidationError is the validation error returned by
// MenuCreateResponse.Validate if the designated constraints aren't met.
type MenuCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuCreateResponseValidationError) ErrorName() string {
	return "MenuCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MenuCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuCreateResponseValidationError{}

// Validate checks the field values on MenuUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MenuUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuUpdateRequestMultiError, or nil if none found.
func (m *MenuUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MenuUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Sort

	if _, ok := _MenuUpdateRequest_Hidden_InLookup[m.GetHidden()]; !ok {
		err := MenuUpdateRequestValidationError{
			field:  "Hidden",
			reason: "value must be in list [ Y N]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _MenuUpdateRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := MenuUpdateRequestValidationError{
			field:  "Status",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if _, ok := _MenuUpdateRequest_UseLayout_InLookup[m.GetUseLayout()]; !ok {
		err := MenuUpdateRequestValidationError{
			field:  "UseLayout",
			reason: "value must be in list [ Y N]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthCode

	if len(errors) > 0 {
		return MenuUpdateRequestMultiError(errors)
	}

	return nil
}

// MenuUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by MenuUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type MenuUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuUpdateRequestMultiError) AllErrors() []error { return m }

// MenuUpdateRequestValidationError is the validation error returned by
// MenuUpdateRequest.Validate if the designated constraints aren't met.
type MenuUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuUpdateRequestValidationError) ErrorName() string {
	return "MenuUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MenuUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuUpdateRequestValidationError{}

var _MenuUpdateRequest_Hidden_InLookup = map[string]struct{}{
	"":  {},
	"Y": {},
	"N": {},
}

var _MenuUpdateRequest_Status_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

var _MenuUpdateRequest_UseLayout_InLookup = map[string]struct{}{
	"":  {},
	"Y": {},
	"N": {},
}

// Validate checks the field values on MenuUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MenuUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuUpdateResponseMultiError, or nil if none found.
func (m *MenuUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MenuUpdateResponseMultiError(errors)
	}

	return nil
}

// MenuUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by MenuUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type MenuUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuUpdateResponseMultiError) AllErrors() []error { return m }

// MenuUpdateResponseValidationError is the validation error returned by
// MenuUpdateResponse.Validate if the designated constraints aren't met.
type MenuUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuUpdateResponseValidationError) ErrorName() string {
	return "MenuUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MenuUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuUpdateResponseValidationError{}

// Validate checks the field values on MenuDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MenuDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuDeleteRequestMultiError, or nil if none found.
func (m *MenuDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MenuDeleteRequestMultiError(errors)
	}

	return nil
}

// MenuDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by MenuDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type MenuDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuDeleteRequestMultiError) AllErrors() []error { return m }

// MenuDeleteRequestValidationError is the validation error returned by
// MenuDeleteRequest.Validate if the designated constraints aren't met.
type MenuDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuDeleteRequestValidationError) ErrorName() string {
	return "MenuDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MenuDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuDeleteRequestValidationError{}

// Validate checks the field values on MenuDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MenuDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuDeleteResponseMultiError, or nil if none found.
func (m *MenuDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MenuDeleteResponseMultiError(errors)
	}

	return nil
}

// MenuDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by MenuDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type MenuDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuDeleteResponseMultiError) AllErrors() []error { return m }

// MenuDeleteResponseValidationError is the validation error returned by
// MenuDeleteResponse.Validate if the designated constraints aren't met.
type MenuDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuDeleteResponseValidationError) ErrorName() string {
	return "MenuDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MenuDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuDeleteResponseValidationError{}
