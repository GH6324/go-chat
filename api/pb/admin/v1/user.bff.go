// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package admin

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IUserHandler BFF 接口
type IUserHandler interface {
	List(ctx context.Context, req *UserListRequest) (*UserListResponse, error)
	Update(ctx context.Context, req *UserUpdateRequest) (*UserUpdateResponse, error)
	Detail(ctx context.Context, req *UserDetailRequest) (*UserDetailResponse, error)
}

// RegisterUserHandler 注册服务路由处理器
func RegisterUserHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IUserHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/backend/user/list", func(c *gin.Context) {
		var in UserListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/user/update", func(c *gin.Context) {
		var in UserUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Update(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/user/detail", func(c *gin.Context) {
		var in UserDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
