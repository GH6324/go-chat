// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package admin

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IAdminHandler BFF 接口
type IAdminHandler interface {
	Create(ctx context.Context, req *AdminCreateRequest) (*AdminCreateResponse, error)
	List(ctx context.Context, req *AdminListRequest) (*AdminListResponse, error)
	UpdateStatus(ctx context.Context, req *AdminUpdateStatusRequest) (*AdminUpdateStatusResponse, error)
	ResetPassword(ctx context.Context, req *AdminResetPasswordRequest) (*AdminResetPasswordResponse, error)
}

// RegisterAdminHandler 注册服务路由处理器
func RegisterAdminHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IAdminHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/backend/admin/create", func(c *gin.Context) {
		var in AdminCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Create(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/admin/list", func(c *gin.Context) {
		var in AdminListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/admin/update-status", func(c *gin.Context) {
		var in AdminUpdateStatusRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.UpdateStatus(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/admin/reset-password", func(c *gin.Context) {
		var in AdminResetPasswordRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.ResetPassword(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
