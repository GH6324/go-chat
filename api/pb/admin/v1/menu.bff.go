// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package admin

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IMenuHandler BFF 接口
type IMenuHandler interface {
	Create(ctx context.Context, req *MenuCreateRequest) (*MenuCreateResponse, error)
	Update(ctx context.Context, req *MenuUpdateRequest) (*MenuUpdateResponse, error)
	Delete(ctx context.Context, req *MenuDeleteRequest) (*MenuDeleteResponse, error)
	List(ctx context.Context, req *MenuListRequest) (*MenuListResponse, error)
}

// RegisterMenuHandler 注册服务路由处理器
func RegisterMenuHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IMenuHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/backend/menu/create", func(c *gin.Context) {
		var in MenuCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Create(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/menu/update", func(c *gin.Context) {
		var in MenuUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Update(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/menu/delete", func(c *gin.Context) {
		var in MenuDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/backend/menu/list", func(c *gin.Context) {
		var in MenuListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
