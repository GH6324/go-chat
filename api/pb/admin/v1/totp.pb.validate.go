// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/totp.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TotpStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpStatusRequestMultiError, or nil if none found.
func (m *TotpStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TotpStatusRequestMultiError(errors)
	}

	return nil
}

// TotpStatusRequestMultiError is an error wrapping multiple validation errors
// returned by TotpStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type TotpStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpStatusRequestMultiError) AllErrors() []error { return m }

// TotpStatusRequestValidationError is the validation error returned by
// TotpStatusRequest.Validate if the designated constraints aren't met.
type TotpStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpStatusRequestValidationError) ErrorName() string {
	return "TotpStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TotpStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpStatusRequestValidationError{}

// Validate checks the field values on TotpStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TotpStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpStatusResponseMultiError, or nil if none found.
func (m *TotpStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	if len(errors) > 0 {
		return TotpStatusResponseMultiError(errors)
	}

	return nil
}

// TotpStatusResponseMultiError is an error wrapping multiple validation errors
// returned by TotpStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type TotpStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpStatusResponseMultiError) AllErrors() []error { return m }

// TotpStatusResponseValidationError is the validation error returned by
// TotpStatusResponse.Validate if the designated constraints aren't met.
type TotpStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpStatusResponseValidationError) ErrorName() string {
	return "TotpStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TotpStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpStatusResponseValidationError{}

// Validate checks the field values on TotpCloseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpCloseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpCloseRequestMultiError, or nil if none found.
func (m *TotpCloseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpCloseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := TotpCloseRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TotpCloseRequestMultiError(errors)
	}

	return nil
}

// TotpCloseRequestMultiError is an error wrapping multiple validation errors
// returned by TotpCloseRequest.ValidateAll() if the designated constraints
// aren't met.
type TotpCloseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpCloseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpCloseRequestMultiError) AllErrors() []error { return m }

// TotpCloseRequestValidationError is the validation error returned by
// TotpCloseRequest.Validate if the designated constraints aren't met.
type TotpCloseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpCloseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpCloseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpCloseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpCloseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpCloseRequestValidationError) ErrorName() string { return "TotpCloseRequestValidationError" }

// Error satisfies the builtin error interface
func (e TotpCloseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpCloseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpCloseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpCloseRequestValidationError{}

// Validate checks the field values on TotpCloseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpCloseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpCloseResponseMultiError, or nil if none found.
func (m *TotpCloseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpCloseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TotpCloseResponseMultiError(errors)
	}

	return nil
}

// TotpCloseResponseMultiError is an error wrapping multiple validation errors
// returned by TotpCloseResponse.ValidateAll() if the designated constraints
// aren't met.
type TotpCloseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpCloseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpCloseResponseMultiError) AllErrors() []error { return m }

// TotpCloseResponseValidationError is the validation error returned by
// TotpCloseResponse.Validate if the designated constraints aren't met.
type TotpCloseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpCloseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpCloseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpCloseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpCloseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpCloseResponseValidationError) ErrorName() string {
	return "TotpCloseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TotpCloseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpCloseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpCloseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpCloseResponseValidationError{}

// Validate checks the field values on TotpInitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpInitRequestMultiError, or nil if none found.
func (m *TotpInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := TotpInitRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TotpInitRequestMultiError(errors)
	}

	return nil
}

// TotpInitRequestMultiError is an error wrapping multiple validation errors
// returned by TotpInitRequest.ValidateAll() if the designated constraints
// aren't met.
type TotpInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpInitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpInitRequestMultiError) AllErrors() []error { return m }

// TotpInitRequestValidationError is the validation error returned by
// TotpInitRequest.Validate if the designated constraints aren't met.
type TotpInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpInitRequestValidationError) ErrorName() string { return "TotpInitRequestValidationError" }

// Error satisfies the builtin error interface
func (e TotpInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpInitRequestValidationError{}

// Validate checks the field values on TotpInitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpInitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpInitResponseMultiError, or nil if none found.
func (m *TotpInitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpInitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QrcodeUri

	// no validation rules for Secret

	if len(errors) > 0 {
		return TotpInitResponseMultiError(errors)
	}

	return nil
}

// TotpInitResponseMultiError is an error wrapping multiple validation errors
// returned by TotpInitResponse.ValidateAll() if the designated constraints
// aren't met.
type TotpInitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpInitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpInitResponseMultiError) AllErrors() []error { return m }

// TotpInitResponseValidationError is the validation error returned by
// TotpInitResponse.Validate if the designated constraints aren't met.
type TotpInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpInitResponseValidationError) ErrorName() string { return "TotpInitResponseValidationError" }

// Error satisfies the builtin error interface
func (e TotpInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpInitResponseValidationError{}

// Validate checks the field values on TotpSubmitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpSubmitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpSubmitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpSubmitRequestMultiError, or nil if none found.
func (m *TotpSubmitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpSubmitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := TotpSubmitRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSession()) < 1 {
		err := TotpSubmitRequestValidationError{
			field:  "Session",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TotpSubmitRequestMultiError(errors)
	}

	return nil
}

// TotpSubmitRequestMultiError is an error wrapping multiple validation errors
// returned by TotpSubmitRequest.ValidateAll() if the designated constraints
// aren't met.
type TotpSubmitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpSubmitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpSubmitRequestMultiError) AllErrors() []error { return m }

// TotpSubmitRequestValidationError is the validation error returned by
// TotpSubmitRequest.Validate if the designated constraints aren't met.
type TotpSubmitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpSubmitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpSubmitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpSubmitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpSubmitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpSubmitRequestValidationError) ErrorName() string {
	return "TotpSubmitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TotpSubmitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpSubmitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpSubmitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpSubmitRequestValidationError{}

// Validate checks the field values on TotpSubmitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TotpSubmitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpSubmitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpSubmitResponseMultiError, or nil if none found.
func (m *TotpSubmitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpSubmitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TotpSubmitResponseMultiError(errors)
	}

	return nil
}

// TotpSubmitResponseMultiError is an error wrapping multiple validation errors
// returned by TotpSubmitResponse.ValidateAll() if the designated constraints
// aren't met.
type TotpSubmitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpSubmitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpSubmitResponseMultiError) AllErrors() []error { return m }

// TotpSubmitResponseValidationError is the validation error returned by
// TotpSubmitResponse.Validate if the designated constraints aren't met.
type TotpSubmitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpSubmitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpSubmitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpSubmitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpSubmitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpSubmitResponseValidationError) ErrorName() string {
	return "TotpSubmitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TotpSubmitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpSubmitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpSubmitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpSubmitResponseValidationError{}

// Validate checks the field values on TotpQrcodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TotpQrcodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpQrcodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpQrcodeRequestMultiError, or nil if none found.
func (m *TotpQrcodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpQrcodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := TotpQrcodeRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TotpQrcodeRequestMultiError(errors)
	}

	return nil
}

// TotpQrcodeRequestMultiError is an error wrapping multiple validation errors
// returned by TotpQrcodeRequest.ValidateAll() if the designated constraints
// aren't met.
type TotpQrcodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpQrcodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpQrcodeRequestMultiError) AllErrors() []error { return m }

// TotpQrcodeRequestValidationError is the validation error returned by
// TotpQrcodeRequest.Validate if the designated constraints aren't met.
type TotpQrcodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpQrcodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpQrcodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpQrcodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpQrcodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpQrcodeRequestValidationError) ErrorName() string {
	return "TotpQrcodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TotpQrcodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpQrcodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpQrcodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpQrcodeRequestValidationError{}

// Validate checks the field values on TotpQrcodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TotpQrcodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotpQrcodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TotpQrcodeResponseMultiError, or nil if none found.
func (m *TotpQrcodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TotpQrcodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QrcodeUri

	if len(errors) > 0 {
		return TotpQrcodeResponseMultiError(errors)
	}

	return nil
}

// TotpQrcodeResponseMultiError is an error wrapping multiple validation errors
// returned by TotpQrcodeResponse.ValidateAll() if the designated constraints
// aren't met.
type TotpQrcodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotpQrcodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotpQrcodeResponseMultiError) AllErrors() []error { return m }

// TotpQrcodeResponseValidationError is the validation error returned by
// TotpQrcodeResponse.Validate if the designated constraints aren't met.
type TotpQrcodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotpQrcodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotpQrcodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotpQrcodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotpQrcodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotpQrcodeResponseValidationError) ErrorName() string {
	return "TotpQrcodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TotpQrcodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotpQrcodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotpQrcodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotpQrcodeResponseValidationError{}
