// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// ICommonHandler BFF 接口
type ICommonHandler interface {
	SendSms(ctx context.Context, req *CommonSendSmsRequest) (*CommonSendSmsResponse, error)
	SendEmail(ctx context.Context, req *CommonSendEmailRequest) (*CommonSendEmailResponse, error)
	Test(ctx context.Context, req *CommonSendTestRequest) (*CommonSendTestResponse, error)
}

// RegisterCommonHandler 注册服务路由处理器
func RegisterCommonHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler ICommonHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/common/send-sms", func(c *gin.Context) {
		var in CommonSendSmsRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SendSms(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/common/send-email", func(c *gin.Context) {
		var in CommonSendEmailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SendEmail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/common/send-test", func(c *gin.Context) {
		var in CommonSendTestRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Test(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
