// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IArticleAnnexHandler BFF 接口
type IArticleAnnexHandler interface {
	Delete(ctx context.Context, req *ArticleAnnexDeleteRequest) (*ArticleAnnexDeleteResponse, error)
	Recover(ctx context.Context, req *ArticleAnnexRecoverRequest) (*ArticleAnnexRecoverResponse, error)
	ForeverDelete(ctx context.Context, req *ArticleAnnexForeverDeleteRequest) (*ArticleAnnexForeverDeleteResponse, error)
	RecoverList(ctx context.Context, req *ArticleAnnexRecoverListRequest) (*ArticleAnnexRecoverListResponse, error)
}

// RegisterArticleAnnexHandler 注册服务路由处理器
func RegisterArticleAnnexHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IArticleAnnexHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/article-annex/delete", func(c *gin.Context) {
		var in ArticleAnnexDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article-annex/recover", func(c *gin.Context) {
		var in ArticleAnnexRecoverRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Recover(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article-annex/forever-delete", func(c *gin.Context) {
		var in ArticleAnnexForeverDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.ForeverDelete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article-annex/recover-list", func(c *gin.Context) {
		var in ArticleAnnexRecoverListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.RecoverList(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
