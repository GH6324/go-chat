// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IAuthHandler BFF 接口
type IAuthHandler interface {
	Login(ctx context.Context, req *AuthLoginRequest) (*AuthLoginResponse, error)
	Register(ctx context.Context, req *AuthRegisterRequest) (*AuthRegisterResponse, error)
	Forget(ctx context.Context, req *AuthForgetRequest) (*AuthForgetResponse, error)
	Oauth(ctx context.Context, req *AuthOauthRequest) (*AuthOauthResponse, error)
	OauthBind(ctx context.Context, req *AuthOAuthBindRequest) (*AuthOAuthBindResponse, error)
	OauthLogin(ctx context.Context, req *AuthOauthLoginRequest) (*AuthOauthLoginResponse, error)
}

// RegisterAuthHandler 注册服务路由处理器
func RegisterAuthHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IAuthHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/auth/login", func(c *gin.Context) {
		var in AuthLoginRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Login(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/auth/register", func(c *gin.Context) {
		var in AuthRegisterRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Register(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/auth/forget", func(c *gin.Context) {
		var in AuthForgetRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Forget(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/auth/oauth", func(c *gin.Context) {
		var in AuthOauthRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Oauth(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/auth/oauth/bind", func(c *gin.Context) {
		var in AuthOAuthBindRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.OauthBind(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/auth/oauth/login", func(c *gin.Context) {
		var in AuthOauthLoginRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.OauthLogin(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
