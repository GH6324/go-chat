// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: web/v1/talk.proto

package web

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 会话列表项
type TalkSessionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TalkMode  int32  `protobuf:"varint,2,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	ToFromId  int32  `protobuf:"varint,3,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
	IsTop     int32  `protobuf:"varint,4,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`
	IsDisturb int32  `protobuf:"varint,5,opt,name=is_disturb,json=isDisturb,proto3" json:"is_disturb,omitempty"`
	IsRobot   int32  `protobuf:"varint,7,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	Name      string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Avatar    string `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Remark    string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	UnreadNum int32  `protobuf:"varint,11,opt,name=unread_num,json=unreadNum,proto3" json:"unread_num,omitempty"`
	MsgText   string `protobuf:"bytes,12,opt,name=msg_text,json=msgText,proto3" json:"msg_text,omitempty"`
	UpdatedAt string `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TalkSessionItem) Reset() {
	*x = TalkSessionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionItem) ProtoMessage() {}

func (x *TalkSessionItem) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionItem.ProtoReflect.Descriptor instead.
func (*TalkSessionItem) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{0}
}

func (x *TalkSessionItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TalkSessionItem) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionItem) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

func (x *TalkSessionItem) GetIsTop() int32 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *TalkSessionItem) GetIsDisturb() int32 {
	if x != nil {
		return x.IsDisturb
	}
	return 0
}

func (x *TalkSessionItem) GetIsRobot() int32 {
	if x != nil {
		return x.IsRobot
	}
	return 0
}

func (x *TalkSessionItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TalkSessionItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TalkSessionItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TalkSessionItem) GetUnreadNum() int32 {
	if x != nil {
		return x.UnreadNum
	}
	return 0
}

func (x *TalkSessionItem) GetMsgText() string {
	if x != nil {
		return x.MsgText
	}
	return ""
}

func (x *TalkSessionItem) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 会话创建接口请求参数
type TalkSessionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1:私聊 2:群聊
	TalkMode int32 `protobuf:"varint,1,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	// 对方ID
	ToFromId int32 `protobuf:"varint,2,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
}

func (x *TalkSessionCreateRequest) Reset() {
	*x = TalkSessionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionCreateRequest) ProtoMessage() {}

func (x *TalkSessionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionCreateRequest.ProtoReflect.Descriptor instead.
func (*TalkSessionCreateRequest) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{1}
}

func (x *TalkSessionCreateRequest) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionCreateRequest) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

// 会话创建接口响应参数
type TalkSessionCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TalkMode  int32  `protobuf:"varint,2,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	ToFromId  int32  `protobuf:"varint,3,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
	IsTop     int32  `protobuf:"varint,4,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`
	IsDisturb int32  `protobuf:"varint,5,opt,name=is_disturb,json=isDisturb,proto3" json:"is_disturb,omitempty"`
	IsOnline  int32  `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	IsRobot   int32  `protobuf:"varint,7,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	Name      string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Avatar    string `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Remark    string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	UnreadNum int32  `protobuf:"varint,11,opt,name=unread_num,json=unreadNum,proto3" json:"unread_num,omitempty"`
	MsgText   string `protobuf:"bytes,12,opt,name=msg_text,json=msgText,proto3" json:"msg_text,omitempty"`
	UpdatedAt string `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TalkSessionCreateResponse) Reset() {
	*x = TalkSessionCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionCreateResponse) ProtoMessage() {}

func (x *TalkSessionCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionCreateResponse.ProtoReflect.Descriptor instead.
func (*TalkSessionCreateResponse) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{2}
}

func (x *TalkSessionCreateResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetIsTop() int32 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetIsDisturb() int32 {
	if x != nil {
		return x.IsDisturb
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetIsRobot() int32 {
	if x != nil {
		return x.IsRobot
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TalkSessionCreateResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TalkSessionCreateResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TalkSessionCreateResponse) GetUnreadNum() int32 {
	if x != nil {
		return x.UnreadNum
	}
	return 0
}

func (x *TalkSessionCreateResponse) GetMsgText() string {
	if x != nil {
		return x.MsgText
	}
	return ""
}

func (x *TalkSessionCreateResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 会话删除接口请求参数
type TalkSessionDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkMode int32 `protobuf:"varint,1,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	ToFromId int32 `protobuf:"varint,2,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
}

func (x *TalkSessionDeleteRequest) Reset() {
	*x = TalkSessionDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionDeleteRequest) ProtoMessage() {}

func (x *TalkSessionDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionDeleteRequest.ProtoReflect.Descriptor instead.
func (*TalkSessionDeleteRequest) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{3}
}

func (x *TalkSessionDeleteRequest) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionDeleteRequest) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

// 会话删除接口响应参数
type TalkSessionDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TalkSessionDeleteResponse) Reset() {
	*x = TalkSessionDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionDeleteResponse) ProtoMessage() {}

func (x *TalkSessionDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionDeleteResponse.ProtoReflect.Descriptor instead.
func (*TalkSessionDeleteResponse) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{4}
}

// 会话置顶接口请求参数
type TalkSessionTopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkMode int32 `protobuf:"varint,1,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	ToFromId int32 `protobuf:"varint,2,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
	Action   int32 `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *TalkSessionTopRequest) Reset() {
	*x = TalkSessionTopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionTopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionTopRequest) ProtoMessage() {}

func (x *TalkSessionTopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionTopRequest.ProtoReflect.Descriptor instead.
func (*TalkSessionTopRequest) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{5}
}

func (x *TalkSessionTopRequest) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionTopRequest) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

func (x *TalkSessionTopRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

// 会话置顶接口响应参数
type TalkSessionTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TalkSessionTopResponse) Reset() {
	*x = TalkSessionTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionTopResponse) ProtoMessage() {}

func (x *TalkSessionTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionTopResponse.ProtoReflect.Descriptor instead.
func (*TalkSessionTopResponse) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{6}
}

// 会话免打扰接口请求参数
type TalkSessionDisturbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkMode int32 `protobuf:"varint,1,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	ToFromId int32 `protobuf:"varint,2,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
	Action   int32 `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *TalkSessionDisturbRequest) Reset() {
	*x = TalkSessionDisturbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionDisturbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionDisturbRequest) ProtoMessage() {}

func (x *TalkSessionDisturbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionDisturbRequest.ProtoReflect.Descriptor instead.
func (*TalkSessionDisturbRequest) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{7}
}

func (x *TalkSessionDisturbRequest) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionDisturbRequest) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

func (x *TalkSessionDisturbRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

// 会话免打扰接口响应参数
type TalkSessionDisturbResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TalkSessionDisturbResponse) Reset() {
	*x = TalkSessionDisturbResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionDisturbResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionDisturbResponse) ProtoMessage() {}

func (x *TalkSessionDisturbResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionDisturbResponse.ProtoReflect.Descriptor instead.
func (*TalkSessionDisturbResponse) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{8}
}

// 会话列表接口请求参数
type TalkSessionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TalkSessionListRequest) Reset() {
	*x = TalkSessionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionListRequest) ProtoMessage() {}

func (x *TalkSessionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionListRequest.ProtoReflect.Descriptor instead.
func (*TalkSessionListRequest) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{9}
}

// 会话列表接口响应参数
type TalkSessionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*TalkSessionItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TalkSessionListResponse) Reset() {
	*x = TalkSessionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionListResponse) ProtoMessage() {}

func (x *TalkSessionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionListResponse.ProtoReflect.Descriptor instead.
func (*TalkSessionListResponse) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{10}
}

func (x *TalkSessionListResponse) GetItems() []*TalkSessionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 会话未读数清除接口请求参数
type TalkSessionClearUnreadNumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkMode int32 `protobuf:"varint,1,opt,name=talk_mode,json=talkMode,proto3" json:"talk_mode,omitempty"`
	ToFromId int32 `protobuf:"varint,2,opt,name=to_from_id,json=toFromId,proto3" json:"to_from_id,omitempty"`
}

func (x *TalkSessionClearUnreadNumRequest) Reset() {
	*x = TalkSessionClearUnreadNumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionClearUnreadNumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionClearUnreadNumRequest) ProtoMessage() {}

func (x *TalkSessionClearUnreadNumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionClearUnreadNumRequest.ProtoReflect.Descriptor instead.
func (*TalkSessionClearUnreadNumRequest) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{11}
}

func (x *TalkSessionClearUnreadNumRequest) GetTalkMode() int32 {
	if x != nil {
		return x.TalkMode
	}
	return 0
}

func (x *TalkSessionClearUnreadNumRequest) GetToFromId() int32 {
	if x != nil {
		return x.ToFromId
	}
	return 0
}

// 会话未读数清除接口响应参数
type TalkSessionClearUnreadNumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TalkSessionClearUnreadNumResponse) Reset() {
	*x = TalkSessionClearUnreadNumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_v1_talk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkSessionClearUnreadNumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkSessionClearUnreadNumResponse) ProtoMessage() {}

func (x *TalkSessionClearUnreadNumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_v1_talk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkSessionClearUnreadNumResponse.ProtoReflect.Descriptor instead.
func (*TalkSessionClearUnreadNumResponse) Descriptor() ([]byte, []int) {
	return file_web_v1_talk_proto_rawDescGZIP(), []int{12}
}

var File_web_v1_talk_proto protoreflect.FileDescriptor

var file_web_v1_talk_proto_rawDesc = []byte{
	0x0a, 0x11, 0x77, 0x65, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x77, 0x65, 0x62, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x92, 0x03, 0x0a, 0x0f, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x23,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74,
	0x75, 0x72, 0x62, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0a, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x23, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x69, 0x0a, 0x18, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52,
	0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0xbf, 0x03, 0x0a, 0x19, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x74,
	0x61, 0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x21, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x09, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x69, 0x0a, 0x18, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x08, 0x74, 0x61,
	0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x1b, 0x0a,
	0x19, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01,
	0x30, 0x02, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x19, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x08, 0x74, 0x61,
	0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x1c, 0x0a, 0x1a, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x0a, 0x16, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x54, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x71, 0x0a, 0x20, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30,
	0x02, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe9, 0x05, 0x0a, 0x04, 0x54, 0x61, 0x6c, 0x6b,
	0x12, 0x76, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c,
	0x6b, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x6a, 0x0a, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x12, 0x1a,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a,
	0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c, 0x6b,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x12, 0x7a, 0x0a, 0x0e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x1e,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x6e, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x25, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x2d,
	0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x5a, 0x0a, 0x77, 0x65, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x65,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_v1_talk_proto_rawDescOnce sync.Once
	file_web_v1_talk_proto_rawDescData = file_web_v1_talk_proto_rawDesc
)

func file_web_v1_talk_proto_rawDescGZIP() []byte {
	file_web_v1_talk_proto_rawDescOnce.Do(func() {
		file_web_v1_talk_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_v1_talk_proto_rawDescData)
	})
	return file_web_v1_talk_proto_rawDescData
}

var file_web_v1_talk_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_web_v1_talk_proto_goTypes = []any{
	(*TalkSessionItem)(nil),                   // 0: web.TalkSessionItem
	(*TalkSessionCreateRequest)(nil),          // 1: web.TalkSessionCreateRequest
	(*TalkSessionCreateResponse)(nil),         // 2: web.TalkSessionCreateResponse
	(*TalkSessionDeleteRequest)(nil),          // 3: web.TalkSessionDeleteRequest
	(*TalkSessionDeleteResponse)(nil),         // 4: web.TalkSessionDeleteResponse
	(*TalkSessionTopRequest)(nil),             // 5: web.TalkSessionTopRequest
	(*TalkSessionTopResponse)(nil),            // 6: web.TalkSessionTopResponse
	(*TalkSessionDisturbRequest)(nil),         // 7: web.TalkSessionDisturbRequest
	(*TalkSessionDisturbResponse)(nil),        // 8: web.TalkSessionDisturbResponse
	(*TalkSessionListRequest)(nil),            // 9: web.TalkSessionListRequest
	(*TalkSessionListResponse)(nil),           // 10: web.TalkSessionListResponse
	(*TalkSessionClearUnreadNumRequest)(nil),  // 11: web.TalkSessionClearUnreadNumRequest
	(*TalkSessionClearUnreadNumResponse)(nil), // 12: web.TalkSessionClearUnreadNumResponse
}
var file_web_v1_talk_proto_depIdxs = []int32{
	0,  // 0: web.TalkSessionListResponse.items:type_name -> web.TalkSessionItem
	1,  // 1: web.Talk.SessionCreate:input_type -> web.TalkSessionCreateRequest
	3,  // 2: web.Talk.SessionDelete:input_type -> web.TalkSessionDeleteRequest
	5,  // 3: web.Talk.SessionTop:input_type -> web.TalkSessionTopRequest
	7,  // 4: web.Talk.SessionDisturb:input_type -> web.TalkSessionDisturbRequest
	9,  // 5: web.Talk.SessionList:input_type -> web.TalkSessionListRequest
	11, // 6: web.Talk.SessionClearUnreadNum:input_type -> web.TalkSessionClearUnreadNumRequest
	2,  // 7: web.Talk.SessionCreate:output_type -> web.TalkSessionCreateResponse
	4,  // 8: web.Talk.SessionDelete:output_type -> web.TalkSessionDeleteResponse
	6,  // 9: web.Talk.SessionTop:output_type -> web.TalkSessionTopResponse
	8,  // 10: web.Talk.SessionDisturb:output_type -> web.TalkSessionDisturbResponse
	10, // 11: web.Talk.SessionList:output_type -> web.TalkSessionListResponse
	12, // 12: web.Talk.SessionClearUnreadNum:output_type -> web.TalkSessionClearUnreadNumResponse
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_web_v1_talk_proto_init() }
func file_web_v1_talk_proto_init() {
	if File_web_v1_talk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web_v1_talk_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionTopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionDisturbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionDisturbResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionClearUnreadNumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_v1_talk_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TalkSessionClearUnreadNumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_v1_talk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web_v1_talk_proto_goTypes,
		DependencyIndexes: file_web_v1_talk_proto_depIdxs,
		MessageInfos:      file_web_v1_talk_proto_msgTypes,
	}.Build()
	File_web_v1_talk_proto = out.File
	file_web_v1_talk_proto_rawDesc = nil
	file_web_v1_talk_proto_goTypes = nil
	file_web_v1_talk_proto_depIdxs = nil
}
