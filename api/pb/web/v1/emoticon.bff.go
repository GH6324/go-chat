// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IEmoticonHandler BFF 接口
type IEmoticonHandler interface {
	Delete(ctx context.Context, req *EmoticonDeleteRequest) (*EmoticonDeleteResponse, error)
	List(ctx context.Context, req *EmoticonListRequest) (*EmoticonListResponse, error)
	Create(ctx context.Context, req *EmoticonCreateRequest) (*EmoticonCreateResponse, error)
}

// RegisterEmoticonHandler 注册服务路由处理器
func RegisterEmoticonHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IEmoticonHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/emoticon/customize/delete", func(c *gin.Context) {
		var in EmoticonDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/emoticon/customize/list", func(c *gin.Context) {
		var in EmoticonListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/emoticon/customize/create", func(c *gin.Context) {
		var in EmoticonCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Create(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
