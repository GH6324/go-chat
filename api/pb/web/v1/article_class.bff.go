// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IArticleClassHandler BFF 接口
type IArticleClassHandler interface {
	List(ctx context.Context, req *ArticleClassListRequest) (*ArticleClassListResponse, error)
	Edit(ctx context.Context, req *ArticleClassEditRequest) (*ArticleClassEditResponse, error)
	Delete(ctx context.Context, req *ArticleClassDeleteRequest) (*ArticleClassDeleteResponse, error)
	Sort(ctx context.Context, req *ArticleClassSortRequest) (*ArticleClassSortResponse, error)
}

// RegisterArticleClassHandler 注册服务路由处理器
func RegisterArticleClassHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IArticleClassHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/article/classify/list", func(c *gin.Context) {
		var in ArticleClassListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/classify/edit", func(c *gin.Context) {
		var in ArticleClassEditRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Edit(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/classify/delete", func(c *gin.Context) {
		var in ArticleClassDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/classify/sort", func(c *gin.Context) {
		var in ArticleClassSortRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Sort(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
