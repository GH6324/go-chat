// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IGroupVoteHandler BFF 接口
type IGroupVoteHandler interface {
	Create(ctx context.Context, req *GroupVoteCreateRequest) (*GroupVoteCreateResponse, error)
	Submit(ctx context.Context, req *GroupVoteSubmitRequest) (*GroupVoteSubmitResponse, error)
	Detail(ctx context.Context, req *GroupVoteDetailRequest) (*GroupVoteDetailResponse, error)
}

// RegisterGroupVoteHandler 注册服务路由处理器
func RegisterGroupVoteHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IGroupVoteHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/group-vote/create", func(c *gin.Context) {
		var in GroupVoteCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Create(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-vote/submit", func(c *gin.Context) {
		var in GroupVoteSubmitRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Submit(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-vote/detail", func(c *gin.Context) {
		var in GroupVoteDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
