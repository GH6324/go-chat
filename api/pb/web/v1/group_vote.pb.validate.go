// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/group_vote.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupVoteCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupVoteCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupVoteCreateRequestMultiError, or nil if none found.
func (m *GroupVoteCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Title

	// no validation rules for Mode

	// no validation rules for IsAnonymous

	if len(errors) > 0 {
		return GroupVoteCreateRequestMultiError(errors)
	}

	return nil
}

// GroupVoteCreateRequestMultiError is an error wrapping multiple validation
// errors returned by GroupVoteCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteCreateRequestMultiError) AllErrors() []error { return m }

// GroupVoteCreateRequestValidationError is the validation error returned by
// GroupVoteCreateRequest.Validate if the designated constraints aren't met.
type GroupVoteCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteCreateRequestValidationError) ErrorName() string {
	return "GroupVoteCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteCreateRequestValidationError{}

// Validate checks the field values on GroupVoteCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupVoteCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupVoteCreateResponseMultiError, or nil if none found.
func (m *GroupVoteCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupVoteCreateResponseMultiError(errors)
	}

	return nil
}

// GroupVoteCreateResponseMultiError is an error wrapping multiple validation
// errors returned by GroupVoteCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteCreateResponseMultiError) AllErrors() []error { return m }

// GroupVoteCreateResponseValidationError is the validation error returned by
// GroupVoteCreateResponse.Validate if the designated constraints aren't met.
type GroupVoteCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteCreateResponseValidationError) ErrorName() string {
	return "GroupVoteCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteCreateResponseValidationError{}

// Validate checks the field values on GroupVoteSubmitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupVoteSubmitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteSubmitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupVoteSubmitRequestMultiError, or nil if none found.
func (m *GroupVoteSubmitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteSubmitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoteId

	if len(errors) > 0 {
		return GroupVoteSubmitRequestMultiError(errors)
	}

	return nil
}

// GroupVoteSubmitRequestMultiError is an error wrapping multiple validation
// errors returned by GroupVoteSubmitRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteSubmitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteSubmitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteSubmitRequestMultiError) AllErrors() []error { return m }

// GroupVoteSubmitRequestValidationError is the validation error returned by
// GroupVoteSubmitRequest.Validate if the designated constraints aren't met.
type GroupVoteSubmitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteSubmitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteSubmitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteSubmitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteSubmitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteSubmitRequestValidationError) ErrorName() string {
	return "GroupVoteSubmitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteSubmitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteSubmitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteSubmitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteSubmitRequestValidationError{}

// Validate checks the field values on GroupVoteSubmitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupVoteSubmitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteSubmitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupVoteSubmitResponseMultiError, or nil if none found.
func (m *GroupVoteSubmitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteSubmitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupVoteSubmitResponseMultiError(errors)
	}

	return nil
}

// GroupVoteSubmitResponseMultiError is an error wrapping multiple validation
// errors returned by GroupVoteSubmitResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteSubmitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteSubmitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteSubmitResponseMultiError) AllErrors() []error { return m }

// GroupVoteSubmitResponseValidationError is the validation error returned by
// GroupVoteSubmitResponse.Validate if the designated constraints aren't met.
type GroupVoteSubmitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteSubmitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteSubmitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteSubmitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteSubmitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteSubmitResponseValidationError) ErrorName() string {
	return "GroupVoteSubmitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteSubmitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteSubmitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteSubmitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteSubmitResponseValidationError{}

// Validate checks the field values on GroupVoteDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupVoteDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupVoteDetailRequestMultiError, or nil if none found.
func (m *GroupVoteDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoteId

	if len(errors) > 0 {
		return GroupVoteDetailRequestMultiError(errors)
	}

	return nil
}

// GroupVoteDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GroupVoteDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteDetailRequestMultiError) AllErrors() []error { return m }

// GroupVoteDetailRequestValidationError is the validation error returned by
// GroupVoteDetailRequest.Validate if the designated constraints aren't met.
type GroupVoteDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteDetailRequestValidationError) ErrorName() string {
	return "GroupVoteDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteDetailRequestValidationError{}

// Validate checks the field values on GroupVoteDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupVoteDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupVoteDetailResponseMultiError, or nil if none found.
func (m *GroupVoteDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoteId

	// no validation rules for Title

	// no validation rules for AnswerMode

	for idx, item := range m.GetAnswerOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupVoteDetailResponseValidationError{
						field:  fmt.Sprintf("AnswerOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupVoteDetailResponseValidationError{
						field:  fmt.Sprintf("AnswerOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupVoteDetailResponseValidationError{
					field:  fmt.Sprintf("AnswerOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AnswerNum

	// no validation rules for AnsweredNum

	// no validation rules for IsAnonymous

	for idx, item := range m.GetAnsweredUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupVoteDetailResponseValidationError{
						field:  fmt.Sprintf("AnsweredUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupVoteDetailResponseValidationError{
						field:  fmt.Sprintf("AnsweredUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupVoteDetailResponseValidationError{
					field:  fmt.Sprintf("AnsweredUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsSubmit

	if len(errors) > 0 {
		return GroupVoteDetailResponseMultiError(errors)
	}

	return nil
}

// GroupVoteDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GroupVoteDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteDetailResponseMultiError) AllErrors() []error { return m }

// GroupVoteDetailResponseValidationError is the validation error returned by
// GroupVoteDetailResponse.Validate if the designated constraints aren't met.
type GroupVoteDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteDetailResponseValidationError) ErrorName() string {
	return "GroupVoteDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteDetailResponseValidationError{}

// Validate checks the field values on GroupVoteDetailResponse_AnswerOption
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GroupVoteDetailResponse_AnswerOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteDetailResponse_AnswerOption
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GroupVoteDetailResponse_AnswerOptionMultiError, or nil if none found.
func (m *GroupVoteDetailResponse_AnswerOption) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteDetailResponse_AnswerOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return GroupVoteDetailResponse_AnswerOptionMultiError(errors)
	}

	return nil
}

// GroupVoteDetailResponse_AnswerOptionMultiError is an error wrapping multiple
// validation errors returned by
// GroupVoteDetailResponse_AnswerOption.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteDetailResponse_AnswerOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteDetailResponse_AnswerOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteDetailResponse_AnswerOptionMultiError) AllErrors() []error { return m }

// GroupVoteDetailResponse_AnswerOptionValidationError is the validation error
// returned by GroupVoteDetailResponse_AnswerOption.Validate if the designated
// constraints aren't met.
type GroupVoteDetailResponse_AnswerOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteDetailResponse_AnswerOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteDetailResponse_AnswerOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteDetailResponse_AnswerOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteDetailResponse_AnswerOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteDetailResponse_AnswerOptionValidationError) ErrorName() string {
	return "GroupVoteDetailResponse_AnswerOptionValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteDetailResponse_AnswerOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteDetailResponse_AnswerOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteDetailResponse_AnswerOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteDetailResponse_AnswerOptionValidationError{}

// Validate checks the field values on GroupVoteDetailResponse_AnsweredUser
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GroupVoteDetailResponse_AnsweredUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupVoteDetailResponse_AnsweredUser
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GroupVoteDetailResponse_AnsweredUserMultiError, or nil if none found.
func (m *GroupVoteDetailResponse_AnsweredUser) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupVoteDetailResponse_AnsweredUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Nickname

	// no validation rules for AnswerTime

	if len(errors) > 0 {
		return GroupVoteDetailResponse_AnsweredUserMultiError(errors)
	}

	return nil
}

// GroupVoteDetailResponse_AnsweredUserMultiError is an error wrapping multiple
// validation errors returned by
// GroupVoteDetailResponse_AnsweredUser.ValidateAll() if the designated
// constraints aren't met.
type GroupVoteDetailResponse_AnsweredUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupVoteDetailResponse_AnsweredUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupVoteDetailResponse_AnsweredUserMultiError) AllErrors() []error { return m }

// GroupVoteDetailResponse_AnsweredUserValidationError is the validation error
// returned by GroupVoteDetailResponse_AnsweredUser.Validate if the designated
// constraints aren't met.
type GroupVoteDetailResponse_AnsweredUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupVoteDetailResponse_AnsweredUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupVoteDetailResponse_AnsweredUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupVoteDetailResponse_AnsweredUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupVoteDetailResponse_AnsweredUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupVoteDetailResponse_AnsweredUserValidationError) ErrorName() string {
	return "GroupVoteDetailResponse_AnsweredUserValidationError"
}

// Error satisfies the builtin error interface
func (e GroupVoteDetailResponse_AnsweredUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupVoteDetailResponse_AnsweredUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupVoteDetailResponse_AnsweredUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupVoteDetailResponse_AnsweredUserValidationError{}
