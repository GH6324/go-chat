// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/article.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ArticleEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleEditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleEditRequestMultiError, or nil if none found.
func (m *ArticleEditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleEditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for ClassId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for MdContent

	if len(errors) > 0 {
		return ArticleEditRequestMultiError(errors)
	}

	return nil
}

// ArticleEditRequestMultiError is an error wrapping multiple validation errors
// returned by ArticleEditRequest.ValidateAll() if the designated constraints
// aren't met.
type ArticleEditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleEditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleEditRequestMultiError) AllErrors() []error { return m }

// ArticleEditRequestValidationError is the validation error returned by
// ArticleEditRequest.Validate if the designated constraints aren't met.
type ArticleEditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleEditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleEditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleEditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleEditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleEditRequestValidationError) ErrorName() string {
	return "ArticleEditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleEditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleEditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleEditRequestValidationError{}

// Validate checks the field values on ArticleEditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleEditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleEditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleEditResponseMultiError, or nil if none found.
func (m *ArticleEditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleEditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Abstract

	// no validation rules for Image

	if len(errors) > 0 {
		return ArticleEditResponseMultiError(errors)
	}

	return nil
}

// ArticleEditResponseMultiError is an error wrapping multiple validation
// errors returned by ArticleEditResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleEditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleEditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleEditResponseMultiError) AllErrors() []error { return m }

// ArticleEditResponseValidationError is the validation error returned by
// ArticleEditResponse.Validate if the designated constraints aren't met.
type ArticleEditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleEditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleEditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleEditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleEditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleEditResponseValidationError) ErrorName() string {
	return "ArticleEditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleEditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleEditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleEditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleEditResponseValidationError{}

// Validate checks the field values on ArticleDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDetailRequestMultiError, or nil if none found.
func (m *ArticleDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return ArticleDetailRequestMultiError(errors)
	}

	return nil
}

// ArticleDetailRequestMultiError is an error wrapping multiple validation
// errors returned by ArticleDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type ArticleDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDetailRequestMultiError) AllErrors() []error { return m }

// ArticleDetailRequestValidationError is the validation error returned by
// ArticleDetailRequest.Validate if the designated constraints aren't met.
type ArticleDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDetailRequestValidationError) ErrorName() string {
	return "ArticleDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDetailRequestValidationError{}

// Validate checks the field values on ArticleDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDetailResponseMultiError, or nil if none found.
func (m *ArticleDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClassId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for MdContent

	// no validation rules for IsAsterisk

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleDetailResponseValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleDetailResponseValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleDetailResponseValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleDetailResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleDetailResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleDetailResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArticleDetailResponseMultiError(errors)
	}

	return nil
}

// ArticleDetailResponseMultiError is an error wrapping multiple validation
// errors returned by ArticleDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDetailResponseMultiError) AllErrors() []error { return m }

// ArticleDetailResponseValidationError is the validation error returned by
// ArticleDetailResponse.Validate if the designated constraints aren't met.
type ArticleDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDetailResponseValidationError) ErrorName() string {
	return "ArticleDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDetailResponseValidationError{}

// Validate checks the field values on ArticleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleListRequestMultiError, or nil if none found.
func (m *ArticleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for FindType

	// no validation rules for Cid

	// no validation rules for Page

	if len(errors) > 0 {
		return ArticleListRequestMultiError(errors)
	}

	return nil
}

// ArticleListRequestMultiError is an error wrapping multiple validation errors
// returned by ArticleListRequest.ValidateAll() if the designated constraints
// aren't met.
type ArticleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleListRequestMultiError) AllErrors() []error { return m }

// ArticleListRequestValidationError is the validation error returned by
// ArticleListRequest.Validate if the designated constraints aren't met.
type ArticleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleListRequestValidationError) ErrorName() string {
	return "ArticleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleListRequestValidationError{}

// Validate checks the field values on ArticleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleListResponseMultiError, or nil if none found.
func (m *ArticleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleListResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleListResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleListResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArticleListResponseMultiError(errors)
	}

	return nil
}

// ArticleListResponseMultiError is an error wrapping multiple validation
// errors returned by ArticleListResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleListResponseMultiError) AllErrors() []error { return m }

// ArticleListResponseValidationError is the validation error returned by
// ArticleListResponse.Validate if the designated constraints aren't met.
type ArticleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleListResponseValidationError) ErrorName() string {
	return "ArticleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleListResponseValidationError{}

// Validate checks the field values on ArticleDetailResponse_Tag with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDetailResponse_Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDetailResponse_Tag with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDetailResponse_TagMultiError, or nil if none found.
func (m *ArticleDetailResponse_Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDetailResponse_Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArticleDetailResponse_TagMultiError(errors)
	}

	return nil
}

// ArticleDetailResponse_TagMultiError is an error wrapping multiple validation
// errors returned by ArticleDetailResponse_Tag.ValidateAll() if the
// designated constraints aren't met.
type ArticleDetailResponse_TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDetailResponse_TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDetailResponse_TagMultiError) AllErrors() []error { return m }

// ArticleDetailResponse_TagValidationError is the validation error returned by
// ArticleDetailResponse_Tag.Validate if the designated constraints aren't met.
type ArticleDetailResponse_TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDetailResponse_TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDetailResponse_TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDetailResponse_TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDetailResponse_TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDetailResponse_TagValidationError) ErrorName() string {
	return "ArticleDetailResponse_TagValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDetailResponse_TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDetailResponse_Tag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDetailResponse_TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDetailResponse_TagValidationError{}

// Validate checks the field values on ArticleDetailResponse_File with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDetailResponse_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDetailResponse_File with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDetailResponse_FileMultiError, or nil if none found.
func (m *ArticleDetailResponse_File) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDetailResponse_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OriginalName

	// no validation rules for Size

	// no validation rules for Suffix

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ArticleDetailResponse_FileMultiError(errors)
	}

	return nil
}

// ArticleDetailResponse_FileMultiError is an error wrapping multiple
// validation errors returned by ArticleDetailResponse_File.ValidateAll() if
// the designated constraints aren't met.
type ArticleDetailResponse_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDetailResponse_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDetailResponse_FileMultiError) AllErrors() []error { return m }

// ArticleDetailResponse_FileValidationError is the validation error returned
// by ArticleDetailResponse_File.Validate if the designated constraints aren't met.
type ArticleDetailResponse_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDetailResponse_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDetailResponse_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDetailResponse_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDetailResponse_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDetailResponse_FileValidationError) ErrorName() string {
	return "ArticleDetailResponse_FileValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDetailResponse_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDetailResponse_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDetailResponse_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDetailResponse_FileValidationError{}

// Validate checks the field values on ArticleListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleListResponse_ItemMultiError, or nil if none found.
func (m *ArticleListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClassId

	// no validation rules for TagsId

	// no validation rules for Title

	// no validation rules for ClassName

	// no validation rules for Image

	// no validation rules for IsAsterisk

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Abstract

	if len(errors) > 0 {
		return ArticleListResponse_ItemMultiError(errors)
	}

	return nil
}

// ArticleListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ArticleListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ArticleListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleListResponse_ItemMultiError) AllErrors() []error { return m }

// ArticleListResponse_ItemValidationError is the validation error returned by
// ArticleListResponse_Item.Validate if the designated constraints aren't met.
type ArticleListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleListResponse_ItemValidationError) ErrorName() string {
	return "ArticleListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleListResponse_ItemValidationError{}

// Validate checks the field values on ArticleListResponse_Paginate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleListResponse_Paginate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleListResponse_Paginate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleListResponse_PaginateMultiError, or nil if none found.
func (m *ArticleListResponse_Paginate) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleListResponse_Paginate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Total

	if len(errors) > 0 {
		return ArticleListResponse_PaginateMultiError(errors)
	}

	return nil
}

// ArticleListResponse_PaginateMultiError is an error wrapping multiple
// validation errors returned by ArticleListResponse_Paginate.ValidateAll() if
// the designated constraints aren't met.
type ArticleListResponse_PaginateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleListResponse_PaginateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleListResponse_PaginateMultiError) AllErrors() []error { return m }

// ArticleListResponse_PaginateValidationError is the validation error returned
// by ArticleListResponse_Paginate.Validate if the designated constraints
// aren't met.
type ArticleListResponse_PaginateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleListResponse_PaginateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleListResponse_PaginateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleListResponse_PaginateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleListResponse_PaginateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleListResponse_PaginateValidationError) ErrorName() string {
	return "ArticleListResponse_PaginateValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleListResponse_PaginateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleListResponse_Paginate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleListResponse_PaginateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleListResponse_PaginateValidationError{}
