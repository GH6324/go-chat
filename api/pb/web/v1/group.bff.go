// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IGroupHandler BFF 接口
type IGroupHandler interface {
	List(ctx context.Context, req *GroupListRequest) (*GroupListResponse, error)
	Create(ctx context.Context, req *GroupCreateRequest) (*GroupCreateResponse, error)
	Detail(ctx context.Context, req *GroupDetailRequest) (*GroupDetailResponse, error)
	MemberList(ctx context.Context, req *GroupMemberListRequest) (*GroupMemberListResponse, error)
	Dismiss(ctx context.Context, req *GroupDismissRequest) (*GroupDismissResponse, error)
	Invite(ctx context.Context, req *GroupInviteRequest) (*GroupInviteResponse, error)
	GetInviteFriends(ctx context.Context, req *GetInviteFriendsRequest) (*GetInviteFriendsResponse, error)
	Secede(ctx context.Context, req *GroupSecedeRequest) (*GroupSecedeResponse, error)
	Setting(ctx context.Context, req *GroupSettingRequest) (*GroupSettingResponse, error)
	RemarkUpdate(ctx context.Context, req *GroupRemarkUpdateRequest) (*GroupRemarkUpdateResponse, error)
	RemoveMember(ctx context.Context, req *GroupRemoveMemberRequest) (*GroupRemoveMemberResponse, error)
	OvertList(ctx context.Context, req *GroupOvertListRequest) (*GroupOvertListResponse, error)
	Handover(ctx context.Context, req *GroupHandoverRequest) (*GroupHandoverResponse, error)
	AssignAdmin(ctx context.Context, req *GroupAssignAdminRequest) (*GroupAssignAdminResponse, error)
	NoSpeak(ctx context.Context, req *GroupNoSpeakRequest) (*GroupNoSpeakResponse, error)
	Mute(ctx context.Context, req *GroupMuteRequest) (*GroupMuteResponse, error)
	Overt(ctx context.Context, req *GroupOvertRequest) (*GroupOvertResponse, error)
}

// RegisterGroupHandler 注册服务路由处理器
func RegisterGroupHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IGroupHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/group/list", func(c *gin.Context) {
		var in GroupListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/create", func(c *gin.Context) {
		var in GroupCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Create(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/detail", func(c *gin.Context) {
		var in GroupDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/member-list", func(c *gin.Context) {
		var in GroupMemberListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.MemberList(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/dismiss", func(c *gin.Context) {
		var in GroupDismissRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Dismiss(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/invite", func(c *gin.Context) {
		var in GroupInviteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Invite(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/get-invite-friends", func(c *gin.Context) {
		var in GetInviteFriendsRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.GetInviteFriends(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/secede", func(c *gin.Context) {
		var in GroupSecedeRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Secede(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/setting", func(c *gin.Context) {
		var in GroupSettingRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Setting(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/remark-update", func(c *gin.Context) {
		var in GroupRemarkUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.RemarkUpdate(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/remove-member", func(c *gin.Context) {
		var in GroupRemoveMemberRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.RemoveMember(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/overt-list", func(c *gin.Context) {
		var in GroupOvertListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.OvertList(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/handover", func(c *gin.Context) {
		var in GroupHandoverRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Handover(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/assign-admin", func(c *gin.Context) {
		var in GroupAssignAdminRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.AssignAdmin(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/no-speak", func(c *gin.Context) {
		var in GroupNoSpeakRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.NoSpeak(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/mute", func(c *gin.Context) {
		var in GroupMuteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Mute(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group/overt", func(c *gin.Context) {
		var in GroupOvertRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Overt(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
