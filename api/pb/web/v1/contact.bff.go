// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IContactHandler BFF 接口
type IContactHandler interface {
	List(ctx context.Context, req *ContactListRequest) (*ContactListResponse, error)
	Delete(ctx context.Context, req *ContactDeleteRequest) (*ContactDeleteResponse, error)
	EditRemark(ctx context.Context, req *ContactEditRemarkRequest) (*ContactEditRemarkResponse, error)
	Detail(ctx context.Context, req *ContactDetailRequest) (*ContactDetailResponse, error)
	Search(ctx context.Context, req *ContactSearchRequest) (*ContactSearchResponse, error)
	ChangeGroup(ctx context.Context, req *ContactChangeGroupRequest) (*ContactChangeGroupResponse, error)
	OnlineStatus(ctx context.Context, req *ContactOnlineStatusRequest) (*ContactOnlineStatusResponse, error)
}

// RegisterContactHandler 注册服务路由处理器
func RegisterContactHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IContactHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/contact/list", func(c *gin.Context) {
		var in ContactListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/contact/delete", func(c *gin.Context) {
		var in ContactDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/contact/edit-remark", func(c *gin.Context) {
		var in ContactEditRemarkRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.EditRemark(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/contact/detail", func(c *gin.Context) {
		var in ContactDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/contact/search", func(c *gin.Context) {
		var in ContactSearchRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Search(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/contact/change-group", func(c *gin.Context) {
		var in ContactChangeGroupRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.ChangeGroup(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/contact/online-status", func(c *gin.Context) {
		var in ContactOnlineStatusRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.OnlineStatus(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
