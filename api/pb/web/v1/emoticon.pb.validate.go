// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/emoticon.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmoticonItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmoticonItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmoticonItemMultiError, or
// nil if none found.
func (m *EmoticonItem) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmoticonId

	// no validation rules for Url

	if len(errors) > 0 {
		return EmoticonItemMultiError(errors)
	}

	return nil
}

// EmoticonItemMultiError is an error wrapping multiple validation errors
// returned by EmoticonItem.ValidateAll() if the designated constraints aren't met.
type EmoticonItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonItemMultiError) AllErrors() []error { return m }

// EmoticonItemValidationError is the validation error returned by
// EmoticonItem.Validate if the designated constraints aren't met.
type EmoticonItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonItemValidationError) ErrorName() string { return "EmoticonItemValidationError" }

// Error satisfies the builtin error interface
func (e EmoticonItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonItemValidationError{}

// Validate checks the field values on EmoticonDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonDeleteRequestMultiError, or nil if none found.
func (m *EmoticonDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmoticonId

	if len(errors) > 0 {
		return EmoticonDeleteRequestMultiError(errors)
	}

	return nil
}

// EmoticonDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by EmoticonDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type EmoticonDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonDeleteRequestMultiError) AllErrors() []error { return m }

// EmoticonDeleteRequestValidationError is the validation error returned by
// EmoticonDeleteRequest.Validate if the designated constraints aren't met.
type EmoticonDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonDeleteRequestValidationError) ErrorName() string {
	return "EmoticonDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonDeleteRequestValidationError{}

// Validate checks the field values on EmoticonDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonDeleteResponseMultiError, or nil if none found.
func (m *EmoticonDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmoticonDeleteResponseMultiError(errors)
	}

	return nil
}

// EmoticonDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by EmoticonDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type EmoticonDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonDeleteResponseMultiError) AllErrors() []error { return m }

// EmoticonDeleteResponseValidationError is the validation error returned by
// EmoticonDeleteResponse.Validate if the designated constraints aren't met.
type EmoticonDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonDeleteResponseValidationError) ErrorName() string {
	return "EmoticonDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonDeleteResponseValidationError{}

// Validate checks the field values on EmoticonListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonListRequestMultiError, or nil if none found.
func (m *EmoticonListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmoticonListRequestMultiError(errors)
	}

	return nil
}

// EmoticonListRequestMultiError is an error wrapping multiple validation
// errors returned by EmoticonListRequest.ValidateAll() if the designated
// constraints aren't met.
type EmoticonListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonListRequestMultiError) AllErrors() []error { return m }

// EmoticonListRequestValidationError is the validation error returned by
// EmoticonListRequest.Validate if the designated constraints aren't met.
type EmoticonListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonListRequestValidationError) ErrorName() string {
	return "EmoticonListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonListRequestValidationError{}

// Validate checks the field values on EmoticonListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonListResponseMultiError, or nil if none found.
func (m *EmoticonListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmoticonListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmoticonListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmoticonListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EmoticonListResponseMultiError(errors)
	}

	return nil
}

// EmoticonListResponseMultiError is an error wrapping multiple validation
// errors returned by EmoticonListResponse.ValidateAll() if the designated
// constraints aren't met.
type EmoticonListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonListResponseMultiError) AllErrors() []error { return m }

// EmoticonListResponseValidationError is the validation error returned by
// EmoticonListResponse.Validate if the designated constraints aren't met.
type EmoticonListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonListResponseValidationError) ErrorName() string {
	return "EmoticonListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonListResponseValidationError{}

// Validate checks the field values on EmoticonUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonUploadRequestMultiError, or nil if none found.
func (m *EmoticonUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmoticonUploadRequestMultiError(errors)
	}

	return nil
}

// EmoticonUploadRequestMultiError is an error wrapping multiple validation
// errors returned by EmoticonUploadRequest.ValidateAll() if the designated
// constraints aren't met.
type EmoticonUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonUploadRequestMultiError) AllErrors() []error { return m }

// EmoticonUploadRequestValidationError is the validation error returned by
// EmoticonUploadRequest.Validate if the designated constraints aren't met.
type EmoticonUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonUploadRequestValidationError) ErrorName() string {
	return "EmoticonUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonUploadRequestValidationError{}

// Validate checks the field values on EmoticonUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonUploadResponseMultiError, or nil if none found.
func (m *EmoticonUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmoticonId

	// no validation rules for Url

	if len(errors) > 0 {
		return EmoticonUploadResponseMultiError(errors)
	}

	return nil
}

// EmoticonUploadResponseMultiError is an error wrapping multiple validation
// errors returned by EmoticonUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type EmoticonUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonUploadResponseMultiError) AllErrors() []error { return m }

// EmoticonUploadResponseValidationError is the validation error returned by
// EmoticonUploadResponse.Validate if the designated constraints aren't met.
type EmoticonUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonUploadResponseValidationError) ErrorName() string {
	return "EmoticonUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonUploadResponseValidationError{}

// Validate checks the field values on EmoticonCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonCreateRequestMultiError, or nil if none found.
func (m *EmoticonCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return EmoticonCreateRequestMultiError(errors)
	}

	return nil
}

// EmoticonCreateRequestMultiError is an error wrapping multiple validation
// errors returned by EmoticonCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type EmoticonCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonCreateRequestMultiError) AllErrors() []error { return m }

// EmoticonCreateRequestValidationError is the validation error returned by
// EmoticonCreateRequest.Validate if the designated constraints aren't met.
type EmoticonCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonCreateRequestValidationError) ErrorName() string {
	return "EmoticonCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonCreateRequestValidationError{}

// Validate checks the field values on EmoticonCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmoticonCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmoticonCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmoticonCreateResponseMultiError, or nil if none found.
func (m *EmoticonCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmoticonCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmoticonId

	// no validation rules for Url

	if len(errors) > 0 {
		return EmoticonCreateResponseMultiError(errors)
	}

	return nil
}

// EmoticonCreateResponseMultiError is an error wrapping multiple validation
// errors returned by EmoticonCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type EmoticonCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmoticonCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmoticonCreateResponseMultiError) AllErrors() []error { return m }

// EmoticonCreateResponseValidationError is the validation error returned by
// EmoticonCreateResponse.Validate if the designated constraints aren't met.
type EmoticonCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmoticonCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmoticonCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmoticonCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmoticonCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmoticonCreateResponseValidationError) ErrorName() string {
	return "EmoticonCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EmoticonCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmoticonCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmoticonCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmoticonCreateResponseValidationError{}
