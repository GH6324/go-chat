// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IGroupApplyHandler BFF 接口
type IGroupApplyHandler interface {
	Create(ctx context.Context, req *GroupApplyCreateRequest) (*GroupApplyCreateResponse, error)
	Delete(ctx context.Context, req *GroupApplyDeleteRequest) (*GroupApplyDeleteResponse, error)
	Agree(ctx context.Context, req *GroupApplyAgreeRequest) (*GroupApplyAgreeResponse, error)
	Decline(ctx context.Context, req *GroupApplyDeclineRequest) (*GroupApplyDeclineResponse, error)
	List(ctx context.Context, req *GroupApplyListRequest) (*GroupApplyListResponse, error)
	All(ctx context.Context, req *GroupApplyAllRequest) (*GroupApplyAllResponse, error)
	UnreadNum(ctx context.Context, req *GroupApplyUnreadNumRequest) (*GroupApplyUnreadNumResponse, error)
}

// RegisterGroupApplyHandler 注册服务路由处理器
func RegisterGroupApplyHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IGroupApplyHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/group-apply/create", func(c *gin.Context) {
		var in GroupApplyCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Create(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-apply/delete", func(c *gin.Context) {
		var in GroupApplyDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-apply/agree", func(c *gin.Context) {
		var in GroupApplyAgreeRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Agree(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-apply/decline", func(c *gin.Context) {
		var in GroupApplyDeclineRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Decline(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-apply/list", func(c *gin.Context) {
		var in GroupApplyListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-apply/all", func(c *gin.Context) {
		var in GroupApplyAllRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.All(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/group-apply/unread-num", func(c *gin.Context) {
		var in GroupApplyUnreadNumRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.UnreadNum(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
