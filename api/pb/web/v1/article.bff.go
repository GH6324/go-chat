// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IArticleHandler BFF 接口
type IArticleHandler interface {
	Edit(ctx context.Context, req *ArticleEditRequest) (*ArticleEditResponse, error)
	Detail(ctx context.Context, req *ArticleDetailRequest) (*ArticleDetailResponse, error)
	List(ctx context.Context, req *ArticleListRequest) (*ArticleListResponse, error)
	Delete(ctx context.Context, req *ArticleDeleteRequest) (*ArticleDeleteResponse, error)
	Recover(ctx context.Context, req *ArticleRecoverRequest) (*ArticleRecoverResponse, error)
	ForeverDelete(ctx context.Context, req *ArticleForeverDeleteRequest) (*ArticleForeverDeleteResponse, error)
	Move(ctx context.Context, req *ArticleMoveRequest) (*ArticleMoveResponse, error)
	Asterisk(ctx context.Context, req *ArticleAsteriskRequest) (*ArticleAsteriskResponse, error)
	SetTags(ctx context.Context, req *ArticleTagsRequest) (*ArticleTagsResponse, error)
	RecoverList(ctx context.Context, req *ArticleRecoverListRequest) (*ArticleRecoverListResponse, error)
}

// RegisterArticleHandler 注册服务路由处理器
func RegisterArticleHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IArticleHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/article/editor", func(c *gin.Context) {
		var in ArticleEditRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Edit(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/detail", func(c *gin.Context) {
		var in ArticleDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/list", func(c *gin.Context) {
		var in ArticleListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.List(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/delete", func(c *gin.Context) {
		var in ArticleDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/recover", func(c *gin.Context) {
		var in ArticleRecoverRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Recover(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/forever-delete", func(c *gin.Context) {
		var in ArticleForeverDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.ForeverDelete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/move", func(c *gin.Context) {
		var in ArticleMoveRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Move(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/asterisk", func(c *gin.Context) {
		var in ArticleAsteriskRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Asterisk(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/tags", func(c *gin.Context) {
		var in ArticleTagsRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SetTags(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/article/recover-list", func(c *gin.Context) {
		var in ArticleRecoverListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.RecoverList(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
