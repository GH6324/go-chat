// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/auth.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginRequestMultiError, or nil if none found.
func (m *AuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMobile()) < 11 {
		err := AuthLoginRequestValidationError{
			field:  "Mobile",
			reason: "value length must be at least 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := AuthLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AuthLoginRequest_Platform_InLookup[m.GetPlatform()]; !ok {
		err := AuthLoginRequestValidationError{
			field:  "Platform",
			reason: "value must be in list [web windows mac]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthLoginRequestMultiError(errors)
	}

	return nil
}

// AuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginRequestMultiError) AllErrors() []error { return m }

// AuthLoginRequestValidationError is the validation error returned by
// AuthLoginRequest.Validate if the designated constraints aren't met.
type AuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginRequestValidationError) ErrorName() string { return "AuthLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginRequestValidationError{}

var _AuthLoginRequest_Platform_InLookup = map[string]struct{}{
	"web":     {},
	"windows": {},
	"mac":     {},
}

// Validate checks the field values on AuthLoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginResponseMultiError, or nil if none found.
func (m *AuthLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthLoginResponseMultiError(errors)
	}

	return nil
}

// AuthLoginResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginResponseMultiError) AllErrors() []error { return m }

// AuthLoginResponseValidationError is the validation error returned by
// AuthLoginResponse.Validate if the designated constraints aren't met.
type AuthLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginResponseValidationError) ErrorName() string {
	return "AuthLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginResponseValidationError{}

// Validate checks the field values on AuthRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRegisterRequestMultiError, or nil if none found.
func (m *AuthRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNickname()); l < 2 || l > 20 {
		err := AuthRegisterRequestValidationError{
			field:  "Nickname",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMobile()) != 11 {
		err := AuthRegisterRequestValidationError{
			field:  "Mobile",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := AuthRegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AuthRegisterRequest_Platform_InLookup[m.GetPlatform()]; !ok {
		err := AuthRegisterRequestValidationError{
			field:  "Platform",
			reason: "value must be in list [web windows mac]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSmsCode()) != 6 {
		err := AuthRegisterRequestValidationError{
			field:  "SmsCode",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AuthRegisterRequestMultiError(errors)
	}

	return nil
}

// AuthRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by AuthRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRegisterRequestMultiError) AllErrors() []error { return m }

// AuthRegisterRequestValidationError is the validation error returned by
// AuthRegisterRequest.Validate if the designated constraints aren't met.
type AuthRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRegisterRequestValidationError) ErrorName() string {
	return "AuthRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRegisterRequestValidationError{}

var _AuthRegisterRequest_Platform_InLookup = map[string]struct{}{
	"web":     {},
	"windows": {},
	"mac":     {},
}

// Validate checks the field values on AuthRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRegisterResponseMultiError, or nil if none found.
func (m *AuthRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthRegisterResponseMultiError(errors)
	}

	return nil
}

// AuthRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by AuthRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRegisterResponseMultiError) AllErrors() []error { return m }

// AuthRegisterResponseValidationError is the validation error returned by
// AuthRegisterResponse.Validate if the designated constraints aren't met.
type AuthRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRegisterResponseValidationError) ErrorName() string {
	return "AuthRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRegisterResponseValidationError{}

// Validate checks the field values on AuthForgetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthForgetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgetRequestMultiError, or nil if none found.
func (m *AuthForgetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMobile()) != 11 {
		err := AuthForgetRequestValidationError{
			field:  "Mobile",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := AuthForgetRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSmsCode()) != 6 {
		err := AuthForgetRequestValidationError{
			field:  "SmsCode",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AuthForgetRequestMultiError(errors)
	}

	return nil
}

// AuthForgetRequestMultiError is an error wrapping multiple validation errors
// returned by AuthForgetRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthForgetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgetRequestMultiError) AllErrors() []error { return m }

// AuthForgetRequestValidationError is the validation error returned by
// AuthForgetRequest.Validate if the designated constraints aren't met.
type AuthForgetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgetRequestValidationError) ErrorName() string {
	return "AuthForgetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgetRequestValidationError{}

// Validate checks the field values on AuthForgetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthForgetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthForgetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthForgetResponseMultiError, or nil if none found.
func (m *AuthForgetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthForgetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthForgetResponseMultiError(errors)
	}

	return nil
}

// AuthForgetResponseMultiError is an error wrapping multiple validation errors
// returned by AuthForgetResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthForgetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthForgetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthForgetResponseMultiError) AllErrors() []error { return m }

// AuthForgetResponseValidationError is the validation error returned by
// AuthForgetResponse.Validate if the designated constraints aren't met.
type AuthForgetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthForgetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthForgetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthForgetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthForgetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthForgetResponseValidationError) ErrorName() string {
	return "AuthForgetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthForgetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthForgetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthForgetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthForgetResponseValidationError{}

// Validate checks the field values on AuthOauthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthOauthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOauthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOauthRequestMultiError, or nil if none found.
func (m *AuthOauthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOauthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _AuthOauthRequest_OauthType_InLookup[m.GetOauthType()]; !ok {
		err := AuthOauthRequestValidationError{
			field:  "OauthType",
			reason: "value must be in list [github gitee]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthOauthRequestMultiError(errors)
	}

	return nil
}

// AuthOauthRequestMultiError is an error wrapping multiple validation errors
// returned by AuthOauthRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthOauthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOauthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOauthRequestMultiError) AllErrors() []error { return m }

// AuthOauthRequestValidationError is the validation error returned by
// AuthOauthRequest.Validate if the designated constraints aren't met.
type AuthOauthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOauthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOauthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOauthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOauthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOauthRequestValidationError) ErrorName() string { return "AuthOauthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthOauthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOauthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOauthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOauthRequestValidationError{}

var _AuthOauthRequest_OauthType_InLookup = map[string]struct{}{
	"github": {},
	"gitee":  {},
}

// Validate checks the field values on AuthOauthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthOauthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOauthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOauthResponseMultiError, or nil if none found.
func (m *AuthOauthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOauthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	if len(errors) > 0 {
		return AuthOauthResponseMultiError(errors)
	}

	return nil
}

// AuthOauthResponseMultiError is an error wrapping multiple validation errors
// returned by AuthOauthResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthOauthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOauthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOauthResponseMultiError) AllErrors() []error { return m }

// AuthOauthResponseValidationError is the validation error returned by
// AuthOauthResponse.Validate if the designated constraints aren't met.
type AuthOauthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOauthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOauthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOauthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOauthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOauthResponseValidationError) ErrorName() string {
	return "AuthOauthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOauthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOauthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOauthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOauthResponseValidationError{}

// Validate checks the field values on AuthOauthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOauthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOauthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOauthLoginRequestMultiError, or nil if none found.
func (m *AuthOauthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOauthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _AuthOauthLoginRequest_OauthType_InLookup[m.GetOauthType()]; !ok {
		err := AuthOauthLoginRequestValidationError{
			field:  "OauthType",
			reason: "value must be in list [github gitee]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AuthOauthLoginRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) < 1 {
		err := AuthOauthLoginRequestValidationError{
			field:  "State",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthOauthLoginRequestMultiError(errors)
	}

	return nil
}

// AuthOauthLoginRequestMultiError is an error wrapping multiple validation
// errors returned by AuthOauthLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthOauthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOauthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOauthLoginRequestMultiError) AllErrors() []error { return m }

// AuthOauthLoginRequestValidationError is the validation error returned by
// AuthOauthLoginRequest.Validate if the designated constraints aren't met.
type AuthOauthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOauthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOauthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOauthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOauthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOauthLoginRequestValidationError) ErrorName() string {
	return "AuthOauthLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOauthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOauthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOauthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOauthLoginRequestValidationError{}

var _AuthOauthLoginRequest_OauthType_InLookup = map[string]struct{}{
	"github": {},
	"gitee":  {},
}

// Validate checks the field values on AuthOauthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOauthLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOauthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOauthLoginResponseMultiError, or nil if none found.
func (m *AuthOauthLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOauthLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAuthorize

	if all {
		switch v := interface{}(m.GetAuthorize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthOauthLoginResponseValidationError{
					field:  "Authorize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthOauthLoginResponseValidationError{
					field:  "Authorize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthOauthLoginResponseValidationError{
				field:  "Authorize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BindToken

	if len(errors) > 0 {
		return AuthOauthLoginResponseMultiError(errors)
	}

	return nil
}

// AuthOauthLoginResponseMultiError is an error wrapping multiple validation
// errors returned by AuthOauthLoginResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthOauthLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOauthLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOauthLoginResponseMultiError) AllErrors() []error { return m }

// AuthOauthLoginResponseValidationError is the validation error returned by
// AuthOauthLoginResponse.Validate if the designated constraints aren't met.
type AuthOauthLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOauthLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOauthLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOauthLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOauthLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOauthLoginResponseValidationError) ErrorName() string {
	return "AuthOauthLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOauthLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOauthLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOauthLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOauthLoginResponseValidationError{}

// Validate checks the field values on Authorize with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Authorize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Authorize with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthorizeMultiError, or nil
// if none found.
func (m *Authorize) ValidateAll() error {
	return m.validate(true)
}

func (m *Authorize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for Type

	if len(errors) > 0 {
		return AuthorizeMultiError(errors)
	}

	return nil
}

// AuthorizeMultiError is an error wrapping multiple validation errors returned
// by Authorize.ValidateAll() if the designated constraints aren't met.
type AuthorizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeMultiError) AllErrors() []error { return m }

// AuthorizeValidationError is the validation error returned by
// Authorize.Validate if the designated constraints aren't met.
type AuthorizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeValidationError) ErrorName() string { return "AuthorizeValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeValidationError{}

// Validate checks the field values on AuthOAuthBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOAuthBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOAuthBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOAuthBindRequestMultiError, or nil if none found.
func (m *AuthOAuthBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOAuthBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBindToken()) < 1 {
		err := AuthOAuthBindRequestValidationError{
			field:  "BindToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMobile()) < 1 {
		err := AuthOAuthBindRequestValidationError{
			field:  "Mobile",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSmsCode()) < 1 {
		err := AuthOAuthBindRequestValidationError{
			field:  "SmsCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthOAuthBindRequestMultiError(errors)
	}

	return nil
}

// AuthOAuthBindRequestMultiError is an error wrapping multiple validation
// errors returned by AuthOAuthBindRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthOAuthBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOAuthBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOAuthBindRequestMultiError) AllErrors() []error { return m }

// AuthOAuthBindRequestValidationError is the validation error returned by
// AuthOAuthBindRequest.Validate if the designated constraints aren't met.
type AuthOAuthBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOAuthBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOAuthBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOAuthBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOAuthBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOAuthBindRequestValidationError) ErrorName() string {
	return "AuthOAuthBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOAuthBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOAuthBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOAuthBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOAuthBindRequestValidationError{}

// Validate checks the field values on AuthOAuthBindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthOAuthBindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthOAuthBindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthOAuthBindResponseMultiError, or nil if none found.
func (m *AuthOAuthBindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthOAuthBindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuthorize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthOAuthBindResponseValidationError{
					field:  "Authorize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthOAuthBindResponseValidationError{
					field:  "Authorize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthOAuthBindResponseValidationError{
				field:  "Authorize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthOAuthBindResponseMultiError(errors)
	}

	return nil
}

// AuthOAuthBindResponseMultiError is an error wrapping multiple validation
// errors returned by AuthOAuthBindResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthOAuthBindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthOAuthBindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthOAuthBindResponseMultiError) AllErrors() []error { return m }

// AuthOAuthBindResponseValidationError is the validation error returned by
// AuthOAuthBindResponse.Validate if the designated constraints aren't met.
type AuthOAuthBindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthOAuthBindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthOAuthBindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthOAuthBindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthOAuthBindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthOAuthBindResponseValidationError) ErrorName() string {
	return "AuthOAuthBindResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthOAuthBindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthOAuthBindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthOAuthBindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthOAuthBindResponseValidationError{}
