// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// ITalkHandler BFF 接口
type ITalkHandler interface {
	SessionCreate(ctx context.Context, req *TalkSessionCreateRequest) (*TalkSessionCreateResponse, error)
	SessionDelete(ctx context.Context, req *TalkSessionDeleteRequest) (*TalkSessionDeleteResponse, error)
	SessionTop(ctx context.Context, req *TalkSessionTopRequest) (*TalkSessionTopResponse, error)
	SessionDisturb(ctx context.Context, req *TalkSessionDisturbRequest) (*TalkSessionDisturbResponse, error)
	SessionList(ctx context.Context, req *TalkSessionListRequest) (*TalkSessionListResponse, error)
	SessionClearUnreadNum(ctx context.Context, req *TalkSessionClearUnreadNumRequest) (*TalkSessionClearUnreadNumResponse, error)
}

// RegisterTalkHandler 注册服务路由处理器
func RegisterTalkHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler ITalkHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/talk/session-create", func(c *gin.Context) {
		var in TalkSessionCreateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SessionCreate(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/talk/session-delete", func(c *gin.Context) {
		var in TalkSessionDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SessionDelete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/talk/session-top", func(c *gin.Context) {
		var in TalkSessionTopRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SessionTop(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/talk/session-disturb", func(c *gin.Context) {
		var in TalkSessionDisturbRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SessionDisturb(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/talk/session-list", func(c *gin.Context) {
		var in TalkSessionListRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SessionList(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/talk/session-clear-unread-num", func(c *gin.Context) {
		var in TalkSessionClearUnreadNumRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.SessionClearUnreadNum(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
