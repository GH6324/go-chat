// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/message.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MessageRevokeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRevokeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRevokeRequestMultiError, or nil if none found.
func (m *MessageRevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTalkMode() < 1 {
		err := MessageRevokeRequestValidationError{
			field:  "TalkMode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToFromId() < 1 {
		err := MessageRevokeRequestValidationError{
			field:  "ToFromId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMsgId()) < 1 {
		err := MessageRevokeRequestValidationError{
			field:  "MsgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MessageRevokeRequestMultiError(errors)
	}

	return nil
}

// MessageRevokeRequestMultiError is an error wrapping multiple validation
// errors returned by MessageRevokeRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageRevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRevokeRequestMultiError) AllErrors() []error { return m }

// MessageRevokeRequestValidationError is the validation error returned by
// MessageRevokeRequest.Validate if the designated constraints aren't met.
type MessageRevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRevokeRequestValidationError) ErrorName() string {
	return "MessageRevokeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRevokeRequestValidationError{}

// Validate checks the field values on MessageRevokeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRevokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRevokeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRevokeResponseMultiError, or nil if none found.
func (m *MessageRevokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRevokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MessageRevokeResponseMultiError(errors)
	}

	return nil
}

// MessageRevokeResponseMultiError is an error wrapping multiple validation
// errors returned by MessageRevokeResponse.ValidateAll() if the designated
// constraints aren't met.
type MessageRevokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRevokeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRevokeResponseMultiError) AllErrors() []error { return m }

// MessageRevokeResponseValidationError is the validation error returned by
// MessageRevokeResponse.Validate if the designated constraints aren't met.
type MessageRevokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRevokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRevokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRevokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRevokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRevokeResponseValidationError) ErrorName() string {
	return "MessageRevokeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRevokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRevokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRevokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRevokeResponseValidationError{}

// Validate checks the field values on MessageDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageDeleteRequestMultiError, or nil if none found.
func (m *MessageDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTalkMode() < 1 {
		err := MessageDeleteRequestValidationError{
			field:  "TalkMode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToFromId() < 1 {
		err := MessageDeleteRequestValidationError{
			field:  "ToFromId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMsgIds()) < 1 {
		err := MessageDeleteRequestValidationError{
			field:  "MsgIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MessageDeleteRequestMultiError(errors)
	}

	return nil
}

// MessageDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by MessageDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageDeleteRequestMultiError) AllErrors() []error { return m }

// MessageDeleteRequestValidationError is the validation error returned by
// MessageDeleteRequest.Validate if the designated constraints aren't met.
type MessageDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDeleteRequestValidationError) ErrorName() string {
	return "MessageDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDeleteRequestValidationError{}

// Validate checks the field values on MessageDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageDeleteResponseMultiError, or nil if none found.
func (m *MessageDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MessageDeleteResponseMultiError(errors)
	}

	return nil
}

// MessageDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by MessageDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type MessageDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageDeleteResponseMultiError) AllErrors() []error { return m }

// MessageDeleteResponseValidationError is the validation error returned by
// MessageDeleteResponse.Validate if the designated constraints aren't met.
type MessageDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDeleteResponseValidationError) ErrorName() string {
	return "MessageDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDeleteResponseValidationError{}

// Validate checks the field values on MessageRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRecordsRequestMultiError, or nil if none found.
func (m *MessageRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TalkMode

	// no validation rules for ToFromId

	// no validation rules for Cursor

	// no validation rules for Limit

	if len(errors) > 0 {
		return MessageRecordsRequestMultiError(errors)
	}

	return nil
}

// MessageRecordsRequestMultiError is an error wrapping multiple validation
// errors returned by MessageRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRecordsRequestMultiError) AllErrors() []error { return m }

// MessageRecordsRequestValidationError is the validation error returned by
// MessageRecordsRequest.Validate if the designated constraints aren't met.
type MessageRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRecordsRequestValidationError) ErrorName() string {
	return "MessageRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRecordsRequestValidationError{}

// Validate checks the field values on MessageRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRecordsResponseMultiError, or nil if none found.
func (m *MessageRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageRecordsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageRecordsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageRecordsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return MessageRecordsResponseMultiError(errors)
	}

	return nil
}

// MessageRecordsResponseMultiError is an error wrapping multiple validation
// errors returned by MessageRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type MessageRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRecordsResponseMultiError) AllErrors() []error { return m }

// MessageRecordsResponseValidationError is the validation error returned by
// MessageRecordsResponse.Validate if the designated constraints aren't met.
type MessageRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRecordsResponseValidationError) ErrorName() string {
	return "MessageRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRecordsResponseValidationError{}

// Validate checks the field values on MessageHistoryRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageHistoryRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageHistoryRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageHistoryRecordsRequestMultiError, or nil if none found.
func (m *MessageHistoryRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageHistoryRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TalkMode

	// no validation rules for ToFromId

	// no validation rules for Cursor

	// no validation rules for Limit

	// no validation rules for MsgType

	if len(errors) > 0 {
		return MessageHistoryRecordsRequestMultiError(errors)
	}

	return nil
}

// MessageHistoryRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by MessageHistoryRecordsRequest.ValidateAll() if
// the designated constraints aren't met.
type MessageHistoryRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageHistoryRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageHistoryRecordsRequestMultiError) AllErrors() []error { return m }

// MessageHistoryRecordsRequestValidationError is the validation error returned
// by MessageHistoryRecordsRequest.Validate if the designated constraints
// aren't met.
type MessageHistoryRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageHistoryRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageHistoryRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageHistoryRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageHistoryRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageHistoryRecordsRequestValidationError) ErrorName() string {
	return "MessageHistoryRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageHistoryRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageHistoryRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageHistoryRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageHistoryRecordsRequestValidationError{}

// Validate checks the field values on MessageHistoryRecordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageHistoryRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageHistoryRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MessageHistoryRecordsResponseMultiError, or nil if none found.
func (m *MessageHistoryRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageHistoryRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageHistoryRecordsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageHistoryRecordsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageHistoryRecordsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return MessageHistoryRecordsResponseMultiError(errors)
	}

	return nil
}

// MessageHistoryRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by MessageHistoryRecordsResponse.ValidateAll()
// if the designated constraints aren't met.
type MessageHistoryRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageHistoryRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageHistoryRecordsResponseMultiError) AllErrors() []error { return m }

// MessageHistoryRecordsResponseValidationError is the validation error
// returned by MessageHistoryRecordsResponse.Validate if the designated
// constraints aren't met.
type MessageHistoryRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageHistoryRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageHistoryRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageHistoryRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageHistoryRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageHistoryRecordsResponseValidationError) ErrorName() string {
	return "MessageHistoryRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageHistoryRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageHistoryRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageHistoryRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageHistoryRecordsResponseValidationError{}

// Validate checks the field values on MessageForwardRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageForwardRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageForwardRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageForwardRecordsRequestMultiError, or nil if none found.
func (m *MessageForwardRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageForwardRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TalkMode

	if len(errors) > 0 {
		return MessageForwardRecordsRequestMultiError(errors)
	}

	return nil
}

// MessageForwardRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by MessageForwardRecordsRequest.ValidateAll() if
// the designated constraints aren't met.
type MessageForwardRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageForwardRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageForwardRecordsRequestMultiError) AllErrors() []error { return m }

// MessageForwardRecordsRequestValidationError is the validation error returned
// by MessageForwardRecordsRequest.Validate if the designated constraints
// aren't met.
type MessageForwardRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageForwardRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageForwardRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageForwardRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageForwardRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageForwardRecordsRequestValidationError) ErrorName() string {
	return "MessageForwardRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageForwardRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageForwardRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageForwardRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageForwardRecordsRequestValidationError{}

// Validate checks the field values on MessageRecordsClearResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRecordsClearResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRecordsClearResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRecordsClearResponseMultiError, or nil if none found.
func (m *MessageRecordsClearResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRecordsClearResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageRecordsClearResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageRecordsClearResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageRecordsClearResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageRecordsClearResponseMultiError(errors)
	}

	return nil
}

// MessageRecordsClearResponseMultiError is an error wrapping multiple
// validation errors returned by MessageRecordsClearResponse.ValidateAll() if
// the designated constraints aren't met.
type MessageRecordsClearResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRecordsClearResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRecordsClearResponseMultiError) AllErrors() []error { return m }

// MessageRecordsClearResponseValidationError is the validation error returned
// by MessageRecordsClearResponse.Validate if the designated constraints
// aren't met.
type MessageRecordsClearResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRecordsClearResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRecordsClearResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRecordsClearResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRecordsClearResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRecordsClearResponseValidationError) ErrorName() string {
	return "MessageRecordsClearResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRecordsClearResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRecordsClearResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRecordsClearResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRecordsClearResponseValidationError{}

// Validate checks the field values on MessageRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageRecordMultiError, or
// nil if none found.
func (m *MessageRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	// no validation rules for Sequence

	// no validation rules for MsgType

	// no validation rules for FromId

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for IsRevoked

	// no validation rules for SendTime

	// no validation rules for Extra

	// no validation rules for Quote

	if len(errors) > 0 {
		return MessageRecordMultiError(errors)
	}

	return nil
}

// MessageRecordMultiError is an error wrapping multiple validation errors
// returned by MessageRecord.ValidateAll() if the designated constraints
// aren't met.
type MessageRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRecordMultiError) AllErrors() []error { return m }

// MessageRecordValidationError is the validation error returned by
// MessageRecord.Validate if the designated constraints aren't met.
type MessageRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRecordValidationError) ErrorName() string { return "MessageRecordValidationError" }

// Error satisfies the builtin error interface
func (e MessageRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRecordValidationError{}
