// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IUserHandler BFF 接口
type IUserHandler interface {
	Detail(ctx context.Context, req *UserDetailRequest) (*UserDetailResponse, error)
	Setting(ctx context.Context, req *UserSettingRequest) (*UserSettingResponse, error)
	DetailUpdate(ctx context.Context, req *UserDetailUpdateRequest) (*UserDetailUpdateResponse, error)
	PasswordUpdate(ctx context.Context, req *UserPasswordUpdateRequest) (*UserPasswordUpdateResponse, error)
	MobileUpdate(ctx context.Context, req *UserMobileUpdateRequest) (*UserMobileUpdateResponse, error)
	EmailUpdate(ctx context.Context, req *UserEmailUpdateRequest) (*UserEmailUpdateResponse, error)
}

// RegisterUserHandler 注册服务路由处理器
func RegisterUserHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IUserHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/user/detail", func(c *gin.Context) {
		var in UserDetailRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Detail(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/user/setting", func(c *gin.Context) {
		var in UserSettingRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Setting(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/user/detail-update", func(c *gin.Context) {
		var in UserDetailUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.DetailUpdate(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/user/password-update", func(c *gin.Context) {
		var in UserPasswordUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.PasswordUpdate(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/user/mobile-update", func(c *gin.Context) {
		var in UserMobileUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.MobileUpdate(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/user/email-update", func(c *gin.Context) {
		var in UserEmailUpdateRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.EmailUpdate(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
