// Code generated by protoc-gen-bff. DO NOT EDIT.
// Version: 1.0.0

package web

import (
	"context"

	"github.com/gin-gonic/gin"
)

// IMessageHandler BFF 接口
type IMessageHandler interface {
	Revoke(ctx context.Context, req *MessageRevokeRequest) (*MessageRevokeResponse, error)
	Delete(ctx context.Context, req *MessageDeleteRequest) (*MessageDeleteResponse, error)
	Records(ctx context.Context, req *MessageRecordsRequest) (*MessageRecordsResponse, error)
	HistoryRecords(ctx context.Context, req *MessageHistoryRecordsRequest) (*MessageHistoryRecordsResponse, error)
	ForwardRecords(ctx context.Context, req *MessageForwardRecordsRequest) (*MessageRecordsClearResponse, error)
}

// RegisterMessageHandler 注册服务路由处理器
func RegisterMessageHandler(r gin.IRoutes, s interface {
	ShouldProto(c *gin.Context, in any) error
	ErrorResponse(c *gin.Context, err error)
	SuccessResponse(c *gin.Context, data any)
}, handler IMessageHandler) {
	if handler == nil {
		panic("handler is nil")
	}

	r.POST("/api/v1/message/revoke", func(c *gin.Context) {
		var in MessageRevokeRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Revoke(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/message/delete", func(c *gin.Context) {
		var in MessageDeleteRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Delete(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/message/records", func(c *gin.Context) {
		var in MessageRecordsRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.Records(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/message/history-records", func(c *gin.Context) {
		var in MessageHistoryRecordsRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.HistoryRecords(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

	r.POST("/api/v1/message/forward-records", func(c *gin.Context) {
		var in MessageForwardRecordsRequest
		if err := s.ShouldProto(c, &in); err != nil {
			s.ErrorResponse(c, err)
			return
		}

		data, err := handler.ForwardRecords(c.Request.Context(), &in)
		if err != nil {
			s.ErrorResponse(c, err)
			return
		}

		s.SuccessResponse(c, data)
	})

}
