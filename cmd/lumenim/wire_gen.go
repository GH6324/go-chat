// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"go-chat/config"
	"go-chat/internal/apis"
	"go-chat/internal/apis/handler"
	"go-chat/internal/apis/handler/admin"
	v1_2 "go-chat/internal/apis/handler/admin/v1"
	"go-chat/internal/apis/handler/open"
	v1_3 "go-chat/internal/apis/handler/open/v1"
	"go-chat/internal/apis/handler/web"
	"go-chat/internal/apis/handler/web/v1"
	"go-chat/internal/apis/handler/web/v1/article"
	"go-chat/internal/apis/handler/web/v1/contact"
	"go-chat/internal/apis/handler/web/v1/group"
	"go-chat/internal/apis/handler/web/v1/talk"
	"go-chat/internal/apis/router"
	"go-chat/internal/business"
	"go-chat/internal/comet"
	"go-chat/internal/comet/consume"
	chat2 "go-chat/internal/comet/consume/chat"
	example2 "go-chat/internal/comet/consume/example"
	handler2 "go-chat/internal/comet/handler"
	"go-chat/internal/comet/handler/event"
	"go-chat/internal/comet/handler/event/chat"
	"go-chat/internal/comet/handler/event/example"
	"go-chat/internal/comet/process"
	router2 "go-chat/internal/comet/router"
	"go-chat/internal/mission"
	"go-chat/internal/mission/cron"
	"go-chat/internal/mission/queue"
	"go-chat/internal/mission/temp"
	"go-chat/internal/pkg/core/socket"
	"go-chat/internal/provider"
	"go-chat/internal/repository/cache"
	"go-chat/internal/repository/repo"
	"go-chat/internal/service"
	"go-chat/internal/service/message"
)

import (
	_ "go-chat/internal/pkg/server"
)

// Injectors from wire.go:

func NewHttpInjector(conf *config.Config) *apis.AppProvider {
	db := provider.NewMySQLClient(conf)
	client := provider.NewRedisClient(conf)
	users := repo.NewUsers(db, client)
	smsStorage := cache.NewSmsStorage(client)
	smsService := &service.SmsService{
		Storage: smsStorage,
	}
	userService := &service.UserService{
		UsersRepo: users,
	}
	common := &v1.Common{
		UsersRepo:   users,
		Config:      conf,
		SmsService:  smsService,
		UserService: userService,
	}
	jwtTokenStorage := cache.NewTokenSessionStorage(client)
	redisLock := cache.NewRedisLock(client)
	robot := repo.NewRobot(db)
	source := repo.NewSource(db, client)
	articleClass := repo.NewArticleClass(db)
	articleClassService := &service.ArticleClassService{
		Source:       source,
		ArticleClass: articleClass,
	}
	auth := &v1.Auth{
		Config:              conf,
		Redis:               client,
		JwtTokenStorage:     jwtTokenStorage,
		RedisLock:           redisLock,
		RobotRepo:           robot,
		SmsService:          smsService,
		UserService:         userService,
		ArticleClassService: articleClassService,
	}
	organize := repo.NewOrganize(db)
	user := &v1.User{
		Redis:        client,
		UsersRepo:    users,
		OrganizeRepo: organize,
		UserService:  userService,
		SmsService:   smsService,
	}
	department := repo.NewDepartment(db)
	position := repo.NewPosition(db)
	v1Organize := &v1.Organize{
		DepartmentRepo: department,
		PositionRepo:   position,
		OrganizeRepo:   organize,
	}
	messageStorage := cache.NewMessageStorage(client)
	serverStorage := cache.NewSidStorage(client)
	clientStorage := cache.NewClientStorage(client, conf, serverStorage)
	unreadStorage := cache.NewUnreadStorage(client)
	contactRemark := cache.NewContactRemark(client)
	relation := cache.NewRelation(client)
	repoContact := repo.NewContact(db, contactRemark, relation)
	repoGroup := repo.NewGroup(db)
	groupMember := repo.NewGroupMember(db, relation)
	talkService := &service.TalkService{
		Source:          source,
		GroupMemberRepo: groupMember,
	}
	talkSession := repo.NewTalkSession(db)
	talkSessionService := &service.TalkSessionService{
		Source:          source,
		TalkSessionRepo: talkSession,
	}
	sequence := cache.NewSequence(client)
	repoSequence := repo.NewSequence(db, sequence)
	pushMessage := &business.PushMessage{
		Redis: client,
	}
	groupService := &service.GroupService{
		Source:          source,
		GroupRepo:       repoGroup,
		GroupMemberRepo: groupMember,
		Relation:        relation,
		Sequence:        repoSequence,
		PushMessage:     pushMessage,
	}
	authService := &service.AuthService{
		OrganizeRepo:    organize,
		ContactRepo:     repoContact,
		GroupRepo:       repoGroup,
		GroupMemberRepo: groupMember,
	}
	contactService := &service.ContactService{
		Source:      source,
		ContactRepo: repoContact,
	}
	clientConnectService := &service.ClientConnectService{
		Storage: clientStorage,
	}
	session := &talk.Session{
		RedisLock:            redisLock,
		MessageStorage:       messageStorage,
		ClientStorage:        clientStorage,
		UnreadStorage:        unreadStorage,
		ContactRemark:        contactRemark,
		ContactRepo:          repoContact,
		UsersRepo:            users,
		GroupRepo:            repoGroup,
		TalkService:          talkService,
		TalkSessionService:   talkSessionService,
		UserService:          userService,
		GroupService:         groupService,
		AuthService:          authService,
		ContactService:       contactService,
		ClientConnectService: clientConnectService,
	}
	iFilesystem := provider.NewFilesystem(conf)
	talkMessage := &talk.Message{
		TalkService: talkService,
		AuthService: authService,
		Filesystem:  iFilesystem,
	}
	talkUserMessage := repo.NewTalkRecordFriend(db)
	talkGroupMessage := repo.NewTalkRecordGroup(db)
	vote := cache.NewVote(client)
	groupVote := repo.NewGroupVote(db, vote)
	talkGroupMessageDel := repo.NewTalkRecordGroupDel(db)
	talkRecordService := &service.TalkRecordService{
		Source:                source,
		TalkVoteCache:         vote,
		TalkRecordsVoteRepo:   groupVote,
		GroupMemberRepo:       groupMember,
		TalkRecordFriendRepo:  talkUserMessage,
		TalkRecordGroupRepo:   talkGroupMessage,
		TalkRecordsDeleteRepo: talkGroupMessageDel,
	}
	groupMemberService := &service.GroupMemberService{
		Source:          source,
		GroupMemberRepo: groupMember,
	}
	records := &talk.Records{
		GroupMemberRepo:      groupMember,
		TalkRecordFriendRepo: talkUserMessage,
		TalkRecordGroupRepo:  talkGroupMessage,
		TalkRecordsService:   talkRecordService,
		GroupMemberService:   groupMemberService,
		AuthService:          authService,
		Filesystem:           iFilesystem,
	}
	emoticon := repo.NewEmoticon(db)
	emoticonService := &service.EmoticonService{
		Source:       source,
		EmoticonRepo: emoticon,
		Filesystem:   iFilesystem,
	}
	v1Emoticon := &v1.Emoticon{
		RedisLock:       redisLock,
		EmoticonRepo:    emoticon,
		EmoticonService: emoticonService,
		Filesystem:      iFilesystem,
	}
	fileUpload := repo.NewFileUpload(db)
	fileSplitUploadService := &service.FileSplitUploadService{
		Source:          source,
		SplitUploadRepo: fileUpload,
		Config:          conf,
		FileSystem:      iFilesystem,
	}
	upload := &v1.Upload{
		Config:             conf,
		Filesystem:         iFilesystem,
		SplitUploadService: fileSplitUploadService,
	}
	groupNotice := repo.NewGroupNotice(db)
	messageService := &message.Service{
		Source:              source,
		GroupMemberRepo:     groupMember,
		SplitUploadRepo:     fileUpload,
		TalkRecordsVoteRepo: groupVote,
		UsersRepo:           users,
		Filesystem:          iFilesystem,
		UnreadStorage:       unreadStorage,
		MessageStorage:      messageStorage,
		ServerStorage:       serverStorage,
		ClientStorage:       clientStorage,
		Sequence:            repoSequence,
		RobotRepo:           robot,
		PushMessage:         pushMessage,
	}
	groupGroup := &group.Group{
		RedisLock:          redisLock,
		Repo:               source,
		UsersRepo:          users,
		GroupRepo:          repoGroup,
		GroupMemberRepo:    groupMember,
		GroupNoticeRepo:    groupNotice,
		TalkSessionRepo:    talkSession,
		GroupService:       groupService,
		GroupMemberService: groupMemberService,
		TalkSessionService: talkSessionService,
		UserService:        userService,
		ContactService:     contactService,
		Message:            messageService,
	}
	notice := &group.Notice{
		GroupMemberRepo:    groupMember,
		GroupNoticeRepo:    groupNotice,
		GroupMemberService: groupMemberService,
		Message:            messageService,
		UsersRepo:          users,
	}
	groupApplyStorage := cache.NewGroupApplyStorage(client)
	groupApply := repo.NewGroupApply(db)
	groupApplyService := &service.GroupApplyService{
		Source:         source,
		GroupApplyRepo: groupApply,
	}
	apply := &group.Apply{
		Redis:              client,
		GroupApplyStorage:  groupApplyStorage,
		GroupRepo:          repoGroup,
		GroupApplyRepo:     groupApply,
		GroupMemberRepo:    groupMember,
		GroupApplyService:  groupApplyService,
		GroupMemberService: groupMemberService,
		GroupService:       groupService,
		PushMessage:        pushMessage,
	}
	groupVoteService := &service.GroupVoteService{
		Source:          source,
		GroupMemberRepo: groupMember,
		GroupVoteRepo:   groupVote,
		Sequence:        repoSequence,
	}
	vote2 := &group.Vote{
		GroupMemberRepo:  groupMember,
		GroupVoteRepo:    groupVote,
		GroupVoteService: groupVoteService,
		MessageService:   messageService,
	}
	contactContact := &contact.Contact{
		ClientStorage:   clientStorage,
		ContactRepo:     repoContact,
		UsersRepo:       users,
		OrganizeRepo:    organize,
		TalkSessionRepo: talkSession,
		ContactService:  contactService,
		UserService:     userService,
		TalkListService: talkSessionService,
		Message:         messageService,
	}
	contactApplyService := &service.ContactApplyService{
		Source:      source,
		PushMessage: pushMessage,
	}
	contactApply := &contact.Apply{
		ContactRepo:         repoContact,
		ContactApplyService: contactApplyService,
		UserService:         userService,
		ContactService:      contactService,
		MessageService:      messageService,
	}
	contactGroup := repo.NewContactGroup(db)
	contactGroupService := &service.ContactGroupService{
		Source:           source,
		ContactGroupRepo: contactGroup,
	}
	group2 := &contact.Group{
		ContactRepo:         repoContact,
		ContactGroupRepo:    contactGroup,
		ContactGroupService: contactGroupService,
		ContactService:      contactService,
	}
	articleAnnex := repo.NewArticleAnnex(db)
	repoArticle := repo.NewArticle(db)
	articleService := &service.ArticleService{
		Source:       source,
		ArticleRepo:  repoArticle,
		ArticleClass: articleClass,
	}
	articleAnnexService := &service.ArticleAnnexService{
		Source:       source,
		ArticleAnnex: articleAnnex,
		FileSystem:   iFilesystem,
	}
	articleArticle := &article.Article{
		Source:              source,
		ArticleAnnexRepo:    articleAnnex,
		ArticleRepo:         repoArticle,
		ArticleService:      articleService,
		ArticleAnnexService: articleAnnexService,
		Filesystem:          iFilesystem,
	}
	annex := &article.Annex{
		ArticleAnnexRepo:    articleAnnex,
		ArticleAnnexService: articleAnnexService,
		Filesystem:          iFilesystem,
	}
	class := &article.Class{
		ArticleClassService: articleClassService,
	}
	articleTagService := &service.ArticleTagService{
		Source: source,
	}
	tag := &article.Tag{
		ArticleTagService: articleTagService,
	}
	publish := &talk.Publish{
		AuthService:    authService,
		MessageService: messageService,
	}
	webV1 := &web.V1{
		Common:       common,
		Auth:         auth,
		User:         user,
		Organize:     v1Organize,
		Talk:         session,
		TalkMessage:  talkMessage,
		TalkRecords:  records,
		Emoticon:     v1Emoticon,
		Upload:       upload,
		Group:        groupGroup,
		GroupNotice:  notice,
		GroupApply:   apply,
		GroupVote:    vote2,
		Contact:      contactContact,
		ContactApply: contactApply,
		ContactGroup: group2,
		Article:      articleArticle,
		ArticleAnnex: annex,
		ArticleClass: class,
		ArticleTag:   tag,
		Message:      publish,
	}
	webHandler := &web.Handler{
		V1: webV1,
	}
	index := v1_2.NewIndex()
	repoAdmin := repo.NewAdmin(db)
	captchaStorage := cache.NewCaptchaStorage(client)
	captcha := provider.NewBase64Captcha(captchaStorage)
	v1Auth := &v1_2.Auth{
		Config:          conf,
		AdminRepo:       repoAdmin,
		JwtTokenStorage: jwtTokenStorage,
		ICaptcha:        captcha,
	}
	adminV1 := &admin.V1{
		Index: index,
		Auth:  v1Auth,
	}
	v2 := &admin.V2{}
	adminHandler := &admin.Handler{
		V1: adminV1,
		V2: v2,
	}
	v1Index := v1_3.NewIndex()
	openV1 := &open.V1{
		Index: v1Index,
	}
	openHandler := &open.Handler{
		V1: openV1,
	}
	handlerHandler := &handler.Handler{
		Api:   webHandler,
		Admin: adminHandler,
		Open:  openHandler,
	}
	engine := router.NewRouter(conf, handlerHandler, jwtTokenStorage)
	appProvider := &apis.AppProvider{
		Config: conf,
		Engine: engine,
	}
	return appProvider
}

func NewCommetInjector(conf *config.Config) *comet.AppProvider {
	client := provider.NewRedisClient(conf)
	serverStorage := cache.NewSidStorage(client)
	clientStorage := cache.NewClientStorage(client, conf, serverStorage)
	clientConnectService := &service.ClientConnectService{
		Storage: clientStorage,
	}
	db := provider.NewMySQLClient(conf)
	relation := cache.NewRelation(client)
	groupMember := repo.NewGroupMember(db, relation)
	source := repo.NewSource(db, client)
	groupMemberService := &service.GroupMemberService{
		Source:          source,
		GroupMemberRepo: groupMember,
	}
	pushMessage := &business.PushMessage{
		Redis: client,
	}
	chatHandler := &chat.Handler{
		Redis:         client,
		Source:        source,
		MemberService: groupMemberService,
		PushMessage:   pushMessage,
	}
	roomStorage := socket.NewRoomStorage()
	chatEvent := &event.ChatEvent{
		Redis:           client,
		GroupMemberRepo: groupMember,
		MemberService:   groupMemberService,
		Handler:         chatHandler,
		RoomStorage:     roomStorage,
		PushMessage:     pushMessage,
	}
	chatChannel := &handler2.ChatChannel{
		Storage: clientConnectService,
		Event:   chatEvent,
	}
	exampleHandler := example.NewHandler()
	exampleEvent := &event.ExampleEvent{
		Handler: exampleHandler,
	}
	exampleChannel := &handler2.ExampleChannel{
		Storage: clientStorage,
		Event:   exampleEvent,
	}
	handlerHandler := &handler2.Handler{
		Chat:        chatChannel,
		Example:     exampleChannel,
		Config:      conf,
		RoomStorage: roomStorage,
	}
	jwtTokenStorage := cache.NewTokenSessionStorage(client)
	engine := router2.NewRouter(conf, handlerHandler, jwtTokenStorage)
	healthSubscribe := process.NewHealthSubscribe(serverStorage)
	organize := repo.NewOrganize(db)
	users := repo.NewUsers(db, client)
	vote := cache.NewVote(client)
	groupVote := repo.NewGroupVote(db, vote)
	talkUserMessage := repo.NewTalkRecordFriend(db)
	talkGroupMessage := repo.NewTalkRecordGroup(db)
	talkGroupMessageDel := repo.NewTalkRecordGroupDel(db)
	talkRecordService := &service.TalkRecordService{
		Source:                source,
		TalkVoteCache:         vote,
		TalkRecordsVoteRepo:   groupVote,
		GroupMemberRepo:       groupMember,
		TalkRecordFriendRepo:  talkUserMessage,
		TalkRecordGroupRepo:   talkGroupMessage,
		TalkRecordsDeleteRepo: talkGroupMessageDel,
	}
	contactRemark := cache.NewContactRemark(client)
	repoContact := repo.NewContact(db, contactRemark, relation)
	contactService := &service.ContactService{
		Source:      source,
		ContactRepo: repoContact,
	}
	handler3 := &chat2.Handler{
		Config:               conf,
		OrganizeRepo:         organize,
		UserRepo:             users,
		Source:               source,
		TalkRecordsService:   talkRecordService,
		ContactService:       contactService,
		ClientConnectService: clientConnectService,
		RoomStorage:          roomStorage,
	}
	chatSubscribe := consume.NewChatSubscribe(handler3)
	handler4 := example2.NewHandler()
	exampleSubscribe := consume.NewExampleSubscribe(handler4)
	messageSubscribe := process.NewMessageSubscribe(client, chatSubscribe, exampleSubscribe)
	subServers := &process.SubServers{
		HealthSubscribe:  healthSubscribe,
		MessageSubscribe: messageSubscribe,
	}
	server := process.NewServer(subServers)
	emailClient := provider.NewEmailClient(conf)
	providers := &provider.Providers{
		EmailClient: emailClient,
	}
	appProvider := &comet.AppProvider{
		Config:    conf,
		Engine:    engine,
		Coroutine: server,
		Handler:   handlerHandler,
		Providers: providers,
	}
	return appProvider
}

func NewCronInjector(conf *config.Config) *mission.CronProvider {
	client := provider.NewRedisClient(conf)
	serverStorage := cache.NewSidStorage(client)
	clearWsCache := &cron.ClearWsCache{
		Storage: serverStorage,
	}
	db := provider.NewMySQLClient(conf)
	iFilesystem := provider.NewFilesystem(conf)
	clearArticle := &cron.ClearArticle{
		DB:         db,
		Filesystem: iFilesystem,
	}
	clearTmpFile := &cron.ClearTmpFile{
		DB:         db,
		Filesystem: iFilesystem,
	}
	clearExpireServer := &cron.ClearExpireServer{
		Storage: serverStorage,
	}
	crontab := &cron.Crontab{
		ClearWsCache:      clearWsCache,
		ClearArticle:      clearArticle,
		ClearTmpFile:      clearTmpFile,
		ClearExpireServer: clearExpireServer,
	}
	cronProvider := &mission.CronProvider{
		Config:  conf,
		Crontab: crontab,
	}
	return cronProvider
}

func NewQueueInjector(conf *config.Config) *mission.QueueProvider {
	db := provider.NewMySQLClient(conf)
	robot := repo.NewRobot(db)
	client := provider.NewRedisClient(conf)
	source := repo.NewSource(db, client)
	httpClient := provider.NewHttpClient()
	ipaddressClient := provider.NewIpAddressClient(httpClient)
	ipAddressService := &service.IpAddressService{
		Source:          source,
		Config:          conf,
		IpAddressClient: ipaddressClient,
	}
	talkSession := repo.NewTalkSession(db)
	talkSessionService := &service.TalkSessionService{
		Source:          source,
		TalkSessionRepo: talkSession,
	}
	relation := cache.NewRelation(client)
	groupMember := repo.NewGroupMember(db, relation)
	fileUpload := repo.NewFileUpload(db)
	vote := cache.NewVote(client)
	groupVote := repo.NewGroupVote(db, vote)
	users := repo.NewUsers(db, client)
	iFilesystem := provider.NewFilesystem(conf)
	unreadStorage := cache.NewUnreadStorage(client)
	messageStorage := cache.NewMessageStorage(client)
	serverStorage := cache.NewSidStorage(client)
	clientStorage := cache.NewClientStorage(client, conf, serverStorage)
	sequence := cache.NewSequence(client)
	repoSequence := repo.NewSequence(db, sequence)
	pushMessage := &business.PushMessage{
		Redis: client,
	}
	messageService := &message.Service{
		Source:              source,
		GroupMemberRepo:     groupMember,
		SplitUploadRepo:     fileUpload,
		TalkRecordsVoteRepo: groupVote,
		UsersRepo:           users,
		Filesystem:          iFilesystem,
		UnreadStorage:       unreadStorage,
		MessageStorage:      messageStorage,
		ServerStorage:       serverStorage,
		ClientStorage:       clientStorage,
		Sequence:            repoSequence,
		RobotRepo:           robot,
		PushMessage:         pushMessage,
	}
	userLoginConsumer := &queue.UserLoginConsumer{
		RobotRepo:          robot,
		IpAddressService:   ipAddressService,
		TalkSessionService: talkSessionService,
		Message:            messageService,
	}
	consumers := &queue.Consumers{
		UserLoginConsumer: userLoginConsumer,
	}
	queueProvider := &mission.QueueProvider{
		Consumers: consumers,
		Redis:     client,
	}
	return queueProvider
}

func NewOtherInjector(conf *config.Config) *mission.TempProvider {
	db := provider.NewMySQLClient(conf)
	client := provider.NewRedisClient(conf)
	users := repo.NewUsers(db, client)
	testCommand := temp.TestCommand{
		UserRepo: users,
	}
	tempProvider := &mission.TempProvider{
		TestCommand: testCommand,
	}
	return tempProvider
}

func NewMigrateInjector(conf *config.Config) *mission.MigrateProvider {
	db := provider.NewMySQLClient(conf)
	migrateProvider := &mission.MigrateProvider{
		Config: conf,
		DB:     db,
	}
	return migrateProvider
}

// wire.go:

var providerSet = wire.NewSet(provider.NewMySQLClient, provider.NewRedisClient, provider.NewHttpClient, provider.NewEmailClient, provider.NewFilesystem, provider.NewBase64Captcha, provider.NewIpAddressClient, wire.Struct(new(provider.Providers), "*"), cache.ProviderSet, repo.ProviderSet, business.ProviderSet, service.ProviderSet)
