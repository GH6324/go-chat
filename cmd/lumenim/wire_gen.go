// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"go-chat/config"
	"go-chat/internal/commet"
	"go-chat/internal/commet/consume"
	chat2 "go-chat/internal/commet/consume/chat"
	example2 "go-chat/internal/commet/consume/example"
	"go-chat/internal/commet/event"
	"go-chat/internal/commet/event/chat"
	"go-chat/internal/commet/event/example"
	handler2 "go-chat/internal/commet/handler"
	"go-chat/internal/commet/process"
	router2 "go-chat/internal/commet/router"
	"go-chat/internal/httpapi"
	"go-chat/internal/httpapi/handler"
	"go-chat/internal/httpapi/handler/admin"
	v1_2 "go-chat/internal/httpapi/handler/admin/v1"
	"go-chat/internal/httpapi/handler/open"
	v1_3 "go-chat/internal/httpapi/handler/open/v1"
	"go-chat/internal/httpapi/handler/web"
	"go-chat/internal/httpapi/handler/web/v1"
	"go-chat/internal/httpapi/handler/web/v1/article"
	"go-chat/internal/httpapi/handler/web/v1/contact"
	"go-chat/internal/httpapi/handler/web/v1/group"
	"go-chat/internal/httpapi/handler/web/v1/talk"
	"go-chat/internal/httpapi/router"
	"go-chat/internal/job"
	"go-chat/internal/job/cron"
	"go-chat/internal/job/queue"
	"go-chat/internal/job/temp"
	"go-chat/internal/logic"
	"go-chat/internal/provider"
	"go-chat/internal/repository/cache"
	"go-chat/internal/repository/repo"
	"go-chat/internal/repository/repo/note"
	"go-chat/internal/repository/repo/organize"
	"go-chat/internal/service"
	note2 "go-chat/internal/service/note"
	organize2 "go-chat/internal/service/organize"
)

// Injectors from wire.go:

func NewHttpInjector(conf *config.Config) *httpapi.AppProvider {
	db := provider.NewMySQLClient(conf)
	users := repo.NewUsers(db)
	client := provider.NewRedisClient(conf)
	smsStorage := cache.NewSmsStorage(client)
	smsService := service.NewSmsService(smsStorage)
	userService := service.NewUserService(users)
	common := &v1.Common{
		UsersRepo:   users,
		Config:      conf,
		SmsService:  smsService,
		UserService: userService,
	}
	jwtTokenStorage := cache.NewTokenSessionStorage(client)
	redisLock := cache.NewRedisLock(client)
	source := repo.NewSource(db, client)
	httpClient := provider.NewHttpClient()
	requestClient := provider.NewRequestClient(httpClient)
	ipAddressService := service.NewIpAddressService(source, conf, requestClient)
	talkSession := repo.NewTalkSession(db)
	talkSessionService := service.NewTalkSessionService(source, talkSession)
	articleClass := note.NewArticleClass(db)
	articleClassService := note2.NewArticleClassService(source, articleClass)
	robot := repo.NewRobot(db)
	sequence := cache.NewSequence(client)
	repoSequence := repo.NewSequence(db, sequence)
	messageForwardLogic := logic.NewMessageForwardLogic(db, repoSequence)
	relation := cache.NewRelation(client)
	groupMember := repo.NewGroupMember(db, relation)
	splitUpload := repo.NewFileSplitUpload(db)
	vote := cache.NewVote(client)
	talkRecordsVote := repo.NewTalkRecordsVote(db, vote)
	filesystem := provider.NewFilesystem(conf)
	unreadStorage := cache.NewUnreadStorage(client)
	messageStorage := cache.NewMessageStorage(client)
	serverStorage := cache.NewSidStorage(client)
	clientStorage := cache.NewClientStorage(client, conf, serverStorage)
	messageService := &service.MessageService{
		Source:              source,
		MessageForwardLogic: messageForwardLogic,
		GroupMemberRepo:     groupMember,
		SplitUploadRepo:     splitUpload,
		TalkRecordsVoteRepo: talkRecordsVote,
		Filesystem:          filesystem,
		UnreadStorage:       unreadStorage,
		MessageStorage:      messageStorage,
		ServerStorage:       serverStorage,
		ClientStorage:       clientStorage,
		Sequence:            repoSequence,
		RobotRepo:           robot,
	}
	auth := &v1.Auth{
		Config:              conf,
		UserService:         userService,
		SmsService:          smsService,
		JwtTokenStorage:     jwtTokenStorage,
		RedisLock:           redisLock,
		IpAddressService:    ipAddressService,
		TalkSessionService:  talkSessionService,
		ArticleClassService: articleClassService,
		RobotRepo:           robot,
		MessageService:      messageService,
	}
	organizeOrganize := organize.NewOrganize(db)
	organizeService := organize2.NewOrganizeService(source, organizeOrganize)
	user := &v1.User{
		UsersRepo:       users,
		OrganizeRepo:    organizeOrganize,
		UserService:     userService,
		SmsService:      smsService,
		OrganizeService: organizeService,
	}
	department := organize.NewDepartment(db)
	position := organize.NewPosition(db)
	deptService := organize2.NewOrganizeDeptService(source, department)
	positionService := organize2.NewPositionService(source, position)
	v1Organize := &v1.Organize{
		DepartmentRepo:  department,
		PositionRepo:    position,
		OrganizeRepo:    organizeOrganize,
		DeptService:     deptService,
		OrganizeService: organizeService,
		PositionService: positionService,
	}
	contactRemark := cache.NewContactRemark(client)
	repoContact := repo.NewContact(db, contactRemark, relation)
	repoGroup := repo.NewGroup(db)
	talkService := service.NewTalkService(source, groupMember)
	contactService := service.NewContactService(source, repoContact)
	groupService := service.NewGroupService(source, repoGroup, groupMember, relation, repoSequence)
	authService := service.NewAuthService(organizeOrganize, repoContact, repoGroup, groupMember)
	session := &talk.Session{
		ContactRepo:        repoContact,
		UsersRepo:          users,
		GroupRepo:          repoGroup,
		TalkService:        talkService,
		TalkSessionService: talkSessionService,
		RedisLock:          redisLock,
		UserService:        userService,
		ClientStorage:      clientStorage,
		MessageStorage:     messageStorage,
		ContactService:     contactService,
		UnreadStorage:      unreadStorage,
		ContactRemark:      contactRemark,
		GroupService:       groupService,
		AuthService:        authService,
	}
	message := &talk.Message{
		TalkService:    talkService,
		AuthService:    authService,
		MessageService: messageService,
		Filesystem:     filesystem,
	}
	talkRecords := repo.NewTalkRecords(db)
	talkRecordsService := service.NewTalkRecordsService(source, vote, talkRecordsVote, groupMember, talkRecords)
	groupMemberService := service.NewGroupMemberService(source, groupMember)
	records := &talk.Records{
		GroupMemberRepo:    groupMember,
		TalkRecordsRepo:    talkRecords,
		TalkRecordsService: talkRecordsService,
		GroupMemberService: groupMemberService,
		Filesystem:         filesystem,
		AuthService:        authService,
	}
	emoticon := repo.NewEmoticon(db)
	emoticonService := service.NewEmoticonService(source, emoticon, filesystem)
	v1Emoticon := &v1.Emoticon{
		EmoticonRepo:    emoticon,
		Filesystem:      filesystem,
		EmoticonService: emoticonService,
		RedisLock:       redisLock,
	}
	splitUploadService := service.NewSplitUploadService(source, splitUpload, conf, filesystem)
	upload := &v1.Upload{
		Config:             conf,
		Filesystem:         filesystem,
		SplitUploadService: splitUploadService,
	}
	groupNotice := repo.NewGroupNotice(db)
	groupNoticeService := service.NewGroupNoticeService(source, groupNotice)
	groupGroup := &group.Group{
		RedisLock:          redisLock,
		Repo:               source,
		UsersRepo:          users,
		GroupRepo:          repoGroup,
		GroupMemberRepo:    groupMember,
		TalkSessionRepo:    talkSession,
		GroupService:       groupService,
		GroupMemberService: groupMemberService,
		TalkSessionService: talkSessionService,
		UserService:        userService,
		ContactService:     contactService,
		GroupNoticeService: groupNoticeService,
		MessageService:     messageService,
	}
	notice := &group.Notice{
		GroupMemberRepo:    groupMember,
		GroupNoticeRepo:    groupNotice,
		GroupNoticeService: groupNoticeService,
		GroupMemberService: groupMemberService,
		MessageService:     messageService,
	}
	groupApplyStorage := cache.NewGroupApplyStorage(client)
	groupApply := repo.NewGroupApply(db)
	groupApplyService := service.NewGroupApplyService(source, groupApply)
	apply := &group.Apply{
		Redis:              client,
		GroupApplyStorage:  groupApplyStorage,
		GroupRepo:          repoGroup,
		GroupApplyRepo:     groupApply,
		GroupMemberRepo:    groupMember,
		GroupApplyService:  groupApplyService,
		GroupMemberService: groupMemberService,
		GroupService:       groupService,
	}
	contactContact := &contact.Contact{
		ContactRepo:     repoContact,
		UsersRepo:       users,
		OrganizeRepo:    organizeOrganize,
		TalkSessionRepo: talkSession,
		ContactService:  contactService,
		ClientStorage:   clientStorage,
		UserService:     userService,
		TalkListService: talkSessionService,
		OrganizeService: organizeService,
		MessageService:  messageService,
	}
	contactApplyService := service.NewContactApplyService(source)
	contactApply := &contact.Apply{
		ContactRepo:         repoContact,
		ContactApplyService: contactApplyService,
		UserService:         userService,
		ContactService:      contactService,
		MessageService:      messageService,
	}
	contactGroup := repo.NewContactGroup(db)
	contactGroupService := service.NewContactGroupService(source, contactGroup)
	group2 := &contact.Group{
		ContactRepo:         repoContact,
		ContactGroupRepo:    contactGroup,
		ContactGroupService: contactGroupService,
		ContactService:      contactService,
	}
	articleAnnex := note.NewArticleAnnex(db)
	articleService := note2.NewArticleService(source)
	articleAnnexService := note2.NewArticleAnnexService(source, articleAnnex, filesystem)
	articleArticle := &article.Article{
		ArticleAnnexRepo:    articleAnnex,
		ArticleService:      articleService,
		Filesystem:          filesystem,
		ArticleAnnexService: articleAnnexService,
	}
	annex := &article.Annex{
		ArticleAnnexRepo:    articleAnnex,
		ArticleAnnexService: articleAnnexService,
		Filesystem:          filesystem,
	}
	class := &article.Class{
		ArticleClassService: articleClassService,
	}
	articleTagService := note2.NewArticleTagService(source)
	tag := &article.Tag{
		ArticleTagService: articleTagService,
	}
	publish := &talk.Publish{
		AuthService:    authService,
		MessageService: messageService,
	}
	webV1 := &web.V1{
		Common:       common,
		Auth:         auth,
		User:         user,
		Organize:     v1Organize,
		Talk:         session,
		TalkMessage:  message,
		TalkRecords:  records,
		Emoticon:     v1Emoticon,
		Upload:       upload,
		Group:        groupGroup,
		GroupNotice:  notice,
		GroupApply:   apply,
		Contact:      contactContact,
		ContactApply: contactApply,
		ContactGroup: group2,
		Article:      articleArticle,
		ArticleAnnex: annex,
		ArticleClass: class,
		ArticleTag:   tag,
		Message:      publish,
	}
	webHandler := &web.Handler{
		V1: webV1,
	}
	index := v1_2.NewIndex()
	captchaStorage := cache.NewCaptchaStorage(client)
	repoAdmin := repo.NewAdmin(db)
	v1Auth := v1_2.NewAuth(conf, captchaStorage, repoAdmin, jwtTokenStorage)
	adminV1 := &admin.V1{
		Index: index,
		Auth:  v1Auth,
	}
	v2 := &admin.V2{}
	adminHandler := &admin.Handler{
		V1: adminV1,
		V2: v2,
	}
	v1Index := v1_3.NewIndex()
	openV1 := &open.V1{
		Index: v1Index,
	}
	openHandler := &open.Handler{
		V1: openV1,
	}
	handlerHandler := &handler.Handler{
		Api:   webHandler,
		Admin: adminHandler,
		Open:  openHandler,
	}
	engine := router.NewRouter(conf, handlerHandler, jwtTokenStorage)
	appProvider := &httpapi.AppProvider{
		Config: conf,
		Engine: engine,
	}
	return appProvider
}

func NewCommetInjector(conf *config.Config) *commet.AppProvider {
	client := provider.NewRedisClient(conf)
	serverStorage := cache.NewSidStorage(client)
	clientStorage := cache.NewClientStorage(client, conf, serverStorage)
	roomStorage := cache.NewRoomStorage(client)
	db := provider.NewMySQLClient(conf)
	relation := cache.NewRelation(client)
	groupMember := repo.NewGroupMember(db, relation)
	source := repo.NewSource(db, client)
	groupMemberService := service.NewGroupMemberService(source, groupMember)
	sequence := cache.NewSequence(client)
	repoSequence := repo.NewSequence(db, sequence)
	messageForwardLogic := logic.NewMessageForwardLogic(db, repoSequence)
	splitUpload := repo.NewFileSplitUpload(db)
	vote := cache.NewVote(client)
	talkRecordsVote := repo.NewTalkRecordsVote(db, vote)
	filesystem := provider.NewFilesystem(conf)
	unreadStorage := cache.NewUnreadStorage(client)
	messageStorage := cache.NewMessageStorage(client)
	robot := repo.NewRobot(db)
	messageService := &service.MessageService{
		Source:              source,
		MessageForwardLogic: messageForwardLogic,
		GroupMemberRepo:     groupMember,
		SplitUploadRepo:     splitUpload,
		TalkRecordsVoteRepo: talkRecordsVote,
		Filesystem:          filesystem,
		UnreadStorage:       unreadStorage,
		MessageStorage:      messageStorage,
		ServerStorage:       serverStorage,
		ClientStorage:       clientStorage,
		Sequence:            repoSequence,
		RobotRepo:           robot,
	}
	chatHandler := chat.NewHandler(client, groupMemberService, messageService)
	chatEvent := &event.ChatEvent{
		Redis:           client,
		Config:          conf,
		RoomStorage:     roomStorage,
		GroupMemberRepo: groupMember,
		MemberService:   groupMemberService,
		Handler:         chatHandler,
	}
	chatChannel := &handler2.ChatChannel{
		Storage: clientStorage,
		Event:   chatEvent,
	}
	exampleHandler := example.NewHandler()
	exampleEvent := &event.ExampleEvent{
		Handler: exampleHandler,
	}
	exampleChannel := &handler2.ExampleChannel{
		Storage: clientStorage,
		Event:   exampleEvent,
	}
	handlerHandler := &handler2.Handler{
		Chat:    chatChannel,
		Example: exampleChannel,
		Config:  conf,
	}
	jwtTokenStorage := cache.NewTokenSessionStorage(client)
	engine := router2.NewRouter(conf, handlerHandler, jwtTokenStorage)
	healthSubscribe := process.NewHealthSubscribe(conf, serverStorage)
	talkRecords := repo.NewTalkRecords(db)
	talkRecordsService := service.NewTalkRecordsService(source, vote, talkRecordsVote, groupMember, talkRecords)
	contactRemark := cache.NewContactRemark(client)
	repoContact := repo.NewContact(db, contactRemark, relation)
	contactService := service.NewContactService(source, repoContact)
	organizeOrganize := organize.NewOrganize(db)
	handler3 := chat2.NewHandler(conf, clientStorage, roomStorage, talkRecordsService, contactService, organizeOrganize, source)
	chatSubscribe := consume.NewChatSubscribe(handler3)
	handler4 := example2.NewHandler()
	exampleSubscribe := consume.NewExampleSubscribe(handler4)
	messageSubscribe := process.NewMessageSubscribe(conf, client, chatSubscribe, exampleSubscribe)
	subServers := &process.SubServers{
		HealthSubscribe:  healthSubscribe,
		MessageSubscribe: messageSubscribe,
	}
	server := process.NewServer(subServers)
	emailClient := provider.NewEmailClient(conf)
	providers := &provider.Providers{
		EmailClient: emailClient,
	}
	appProvider := &commet.AppProvider{
		Config:    conf,
		Engine:    engine,
		Coroutine: server,
		Handler:   handlerHandler,
		Providers: providers,
	}
	return appProvider
}

func NewCronInjector(conf *config.Config) *job.CronProvider {
	client := provider.NewRedisClient(conf)
	serverStorage := cache.NewSidStorage(client)
	clearWsCache := cron.NewClearWsCache(serverStorage)
	db := provider.NewMySQLClient(conf)
	filesystem := provider.NewFilesystem(conf)
	clearArticle := cron.NewClearArticle(db, filesystem)
	clearTmpFile := cron.NewClearTmpFile(db, filesystem)
	clearExpireServer := cron.NewClearExpireServer(serverStorage)
	crontab := &job.Crontab{
		ClearWsCache:      clearWsCache,
		ClearArticle:      clearArticle,
		ClearTmpFile:      clearTmpFile,
		ClearExpireServer: clearExpireServer,
	}
	cronProvider := &job.CronProvider{
		Config:  conf,
		Crontab: crontab,
	}
	return cronProvider
}

func NewQueueInjector(conf *config.Config) *job.QueueProvider {
	db := provider.NewMySQLClient(conf)
	exampleQueue := queue.ExampleQueue{}
	jobQueue := &job.Queue{
		ExampleQueue: exampleQueue,
	}
	queueProvider := &job.QueueProvider{
		Config: conf,
		DB:     db,
		Queue:  jobQueue,
	}
	return queueProvider
}

func NewOtherInjector(conf *config.Config) *job.TempProvider {
	db := provider.NewMySQLClient(conf)
	users := repo.NewUsers(db)
	testCommand := temp.TestCommand{
		UserRepo: users,
	}
	tempProvider := &job.TempProvider{
		TestCommand: testCommand,
	}
	return tempProvider
}

func NewMigrateInjector(conf *config.Config) *job.MigrateProvider {
	db := provider.NewMySQLClient(conf)
	migrateProvider := &job.MigrateProvider{
		Config: conf,
		DB:     db,
	}
	return migrateProvider
}

// wire.go:

var providerSet = wire.NewSet(provider.NewMySQLClient, provider.NewRedisClient, provider.NewHttpClient, provider.NewEmailClient, provider.NewFilesystem, provider.NewRequestClient, wire.Struct(new(provider.Providers), "*"), cache.ProviderSet, repo.ProviderSet, logic.ProviderSet, service.ProviderSet)
